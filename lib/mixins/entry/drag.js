"use strict";
var _options = _interopRequireDefault(require("../../options"));
var _drag = _interopRequireDefault(require("../../mixins/drag"));
var _constants = require("../../constants");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var superStartDragging = _drag.default.startDragging, NO_DRAGGING_SUB_ENTRIES = _options.default.NO_DRAGGING_SUB_ENTRIES, ESCAPE_KEY_STOPS_DRAGGING = _options.default.ESCAPE_KEY_STOPS_DRAGGING;
function didMount() {
    this.enableDragging();
    this.onDragging(draggingHandler, this);
    this.onStopDragging(stopDraggingHandler, this);
    this.onStartDragging(startDraggingHandler, this);
}
function willUnmount() {
    this.offStartDragging(startDraggingHandler, this);
    this.offStopDragging(stopDraggingHandler, this);
    this.offDragging(draggingHandler, this);
    this.disableDragging();
}
function isMouseOver(mouseTop, mouseLeft) {
    var collapsedBounds = this.getCollapsedBounds(), collapsedBoundsOverlappingMouse = collapsedBounds.isOverlappingMouse(mouseTop, mouseLeft), mouseOver = collapsedBoundsOverlappingMouse; ///
    return mouseOver;
}
function startDragging(mouseTop, mouseLeft) {
    var explorer = this.getExplorer(), dragEntry = this, topmostDirectoryNameDragEntry = this.isTopmostDirectoryNameDragEntry(), subEntry = !topmostDirectoryNameDragEntry, startedDragging = explorer.hasStartedDragging(dragEntry), noDraggingSubEntriesOptionPresent = explorer.isOptionPresent(NO_DRAGGING_SUB_ENTRIES);
    if (!startedDragging) {
        return;
    }
    if (topmostDirectoryNameDragEntry) {
        return;
    }
    if (subEntry && noDraggingSubEntriesOptionPresent) {
        return;
    }
    superStartDragging.call(this, mouseTop, mouseLeft);
}
function getCollapsedBounds() {
    var bounds = this.getBounds(), collapsedBounds = bounds; ///
    return collapsedBounds;
}
module.exports = {
    didMount: didMount,
    willUnmount: willUnmount,
    isMouseOver: isMouseOver,
    startDragging: startDragging,
    getCollapsedBounds: getCollapsedBounds
};
function keyDownHandler(event, element) {
    var keyCode = event.keyCode, escapeKey = keyCode === _constants.ESCAPE_KEYCODE;
    if (escapeKey) {
        var dragging = this.isDragging();
        if (dragging) {
            var explorer = this.getExplorer();
            explorer.escapeDragging();
            this.stopDragging();
        }
    }
}
function draggingHandler(mouseTop, mouseLeft) {
    var explorer = this.getExplorer(), dragEntry = this; ///
    explorer.dragging(dragEntry);
}
function stopDraggingHandler(mouseTop, mouseLeft) {
    var explorer = this.getExplorer(), escapeKeyStopsDraggingOptionPresent = explorer.isOptionPresent(ESCAPE_KEY_STOPS_DRAGGING);
    if (escapeKeyStopsDraggingOptionPresent) {
        this.offKeyDown(keyDownHandler, this);
    }
}
function startDraggingHandler(mouseTop, mouseLeft) {
    var explorer = this.getExplorer(), escapeKeyStopsDraggingOptionPresent = explorer.isOptionPresent(ESCAPE_KEY_STOPS_DRAGGING);
    if (escapeKeyStopsDraggingOptionPresent) {
        this.onKeyDown(keyDownHandler, this);
    }
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9taXhpbnMvZW50cnkvZHJhZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IG9wdGlvbnMgZnJvbSBcIi4uLy4uL29wdGlvbnNcIjtcbmltcG9ydCBkcmFnTWl4aW5zIGZyb20gXCIuLi8uLi9taXhpbnMvZHJhZ1wiO1xuXG5pbXBvcnQgeyBFU0NBUEVfS0VZQ09ERSB9IGZyb20gXCIuLi8uLi9jb25zdGFudHNcIjtcblxuY29uc3QgeyBzdGFydERyYWdnaW5nOiBzdXBlclN0YXJ0RHJhZ2dpbmcgfSA9IGRyYWdNaXhpbnMsXG4gICAgICB7IE5PX0RSQUdHSU5HX1NVQl9FTlRSSUVTLCBFU0NBUEVfS0VZX1NUT1BTX0RSQUdHSU5HIH0gPSBvcHRpb25zO1xuXG5mdW5jdGlvbiBkaWRNb3VudCgpIHtcbiAgdGhpcy5lbmFibGVEcmFnZ2luZygpO1xuXG4gIHRoaXMub25EcmFnZ2luZyhkcmFnZ2luZ0hhbmRsZXIsIHRoaXMpO1xuICB0aGlzLm9uU3RvcERyYWdnaW5nKHN0b3BEcmFnZ2luZ0hhbmRsZXIsIHRoaXMpO1xuICB0aGlzLm9uU3RhcnREcmFnZ2luZyhzdGFydERyYWdnaW5nSGFuZGxlciwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIHdpbGxVbm1vdW50KCkge1xuICB0aGlzLm9mZlN0YXJ0RHJhZ2dpbmcoc3RhcnREcmFnZ2luZ0hhbmRsZXIsIHRoaXMpO1xuICB0aGlzLm9mZlN0b3BEcmFnZ2luZyhzdG9wRHJhZ2dpbmdIYW5kbGVyLCB0aGlzKTtcbiAgdGhpcy5vZmZEcmFnZ2luZyhkcmFnZ2luZ0hhbmRsZXIsIHRoaXMpO1xuXG4gIHRoaXMuZGlzYWJsZURyYWdnaW5nKCk7XG59XG5cbmZ1bmN0aW9uIGlzTW91c2VPdmVyKG1vdXNlVG9wLCBtb3VzZUxlZnQpIHtcbiAgY29uc3QgY29sbGFwc2VkQm91bmRzID0gdGhpcy5nZXRDb2xsYXBzZWRCb3VuZHMoKSxcbiAgICAgICAgY29sbGFwc2VkQm91bmRzT3ZlcmxhcHBpbmdNb3VzZSA9IGNvbGxhcHNlZEJvdW5kcy5pc092ZXJsYXBwaW5nTW91c2UobW91c2VUb3AsIG1vdXNlTGVmdCksXG4gICAgICAgIG1vdXNlT3ZlciA9IGNvbGxhcHNlZEJvdW5kc092ZXJsYXBwaW5nTW91c2U7ICAvLy9cblxuICByZXR1cm4gbW91c2VPdmVyO1xufVxuXG5mdW5jdGlvbiBzdGFydERyYWdnaW5nKG1vdXNlVG9wLCBtb3VzZUxlZnQpIHtcbiAgY29uc3QgZXhwbG9yZXIgPSB0aGlzLmdldEV4cGxvcmVyKCksXG4gICAgICAgIGRyYWdFbnRyeSA9IHRoaXMsICAvLy9cbiAgICAgICAgdG9wbW9zdERpcmVjdG9yeU5hbWVEcmFnRW50cnkgPSB0aGlzLmlzVG9wbW9zdERpcmVjdG9yeU5hbWVEcmFnRW50cnkoKSxcbiAgICAgICAgc3ViRW50cnkgPSAhdG9wbW9zdERpcmVjdG9yeU5hbWVEcmFnRW50cnksXG4gICAgICAgIHN0YXJ0ZWREcmFnZ2luZyA9IGV4cGxvcmVyLmhhc1N0YXJ0ZWREcmFnZ2luZyhkcmFnRW50cnkpLFxuICAgICAgICBub0RyYWdnaW5nU3ViRW50cmllc09wdGlvblByZXNlbnQgPSBleHBsb3Jlci5pc09wdGlvblByZXNlbnQoTk9fRFJBR0dJTkdfU1VCX0VOVFJJRVMpO1xuXG4gIGlmICghc3RhcnRlZERyYWdnaW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRvcG1vc3REaXJlY3RvcnlOYW1lRHJhZ0VudHJ5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHN1YkVudHJ5ICYmIG5vRHJhZ2dpbmdTdWJFbnRyaWVzT3B0aW9uUHJlc2VudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN1cGVyU3RhcnREcmFnZ2luZy5jYWxsKHRoaXMsIG1vdXNlVG9wLCBtb3VzZUxlZnQpO1xufVxuXG5mdW5jdGlvbiBnZXRDb2xsYXBzZWRCb3VuZHMoKSB7XG4gIGNvbnN0IGJvdW5kcyA9IHRoaXMuZ2V0Qm91bmRzKCksXG4gICAgICAgIGNvbGxhcHNlZEJvdW5kcyA9IGJvdW5kczsgIC8vL1xuXG4gIHJldHVybiBjb2xsYXBzZWRCb3VuZHM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkaWRNb3VudCxcbiAgd2lsbFVubW91bnQsXG4gIGlzTW91c2VPdmVyLFxuICBzdGFydERyYWdnaW5nLFxuICBnZXRDb2xsYXBzZWRCb3VuZHNcbn07XG5cbmZ1bmN0aW9uIGtleURvd25IYW5kbGVyKGV2ZW50LCBlbGVtZW50KSB7XG4gIGNvbnN0IHsga2V5Q29kZSB9ID0gZXZlbnQsXG4gICAgICAgIGVzY2FwZUtleSA9IChrZXlDb2RlID09PSBFU0NBUEVfS0VZQ09ERSk7XG5cbiAgaWYgKGVzY2FwZUtleSkge1xuICAgIGNvbnN0IGRyYWdnaW5nID0gdGhpcy5pc0RyYWdnaW5nKCk7XG5cbiAgICBpZiAoZHJhZ2dpbmcpIHtcbiAgICAgIGNvbnN0IGV4cGxvcmVyID0gdGhpcy5nZXRFeHBsb3JlcigpO1xuXG4gICAgICBleHBsb3Jlci5lc2NhcGVEcmFnZ2luZygpO1xuXG4gICAgICB0aGlzLnN0b3BEcmFnZ2luZygpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkcmFnZ2luZ0hhbmRsZXIobW91c2VUb3AsIG1vdXNlTGVmdCkge1xuICBjb25zdCBleHBsb3JlciA9IHRoaXMuZ2V0RXhwbG9yZXIoKSxcbiAgICAgICAgZHJhZ0VudHJ5ID0gdGhpczsgIC8vL1xuXG4gIGV4cGxvcmVyLmRyYWdnaW5nKGRyYWdFbnRyeSk7XG59XG5cbmZ1bmN0aW9uIHN0b3BEcmFnZ2luZ0hhbmRsZXIobW91c2VUb3AsIG1vdXNlTGVmdCkge1xuICBjb25zdCBleHBsb3JlciA9IHRoaXMuZ2V0RXhwbG9yZXIoKSxcbiAgICAgICAgZXNjYXBlS2V5U3RvcHNEcmFnZ2luZ09wdGlvblByZXNlbnQgPSBleHBsb3Jlci5pc09wdGlvblByZXNlbnQoRVNDQVBFX0tFWV9TVE9QU19EUkFHR0lORyk7XG5cbiAgaWYgKGVzY2FwZUtleVN0b3BzRHJhZ2dpbmdPcHRpb25QcmVzZW50KSB7XG4gICAgdGhpcy5vZmZLZXlEb3duKGtleURvd25IYW5kbGVyLCB0aGlzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydERyYWdnaW5nSGFuZGxlcihtb3VzZVRvcCwgbW91c2VMZWZ0KSB7XG4gIGNvbnN0IGV4cGxvcmVyID0gdGhpcy5nZXRFeHBsb3JlcigpLFxuICAgICAgICBlc2NhcGVLZXlTdG9wc0RyYWdnaW5nT3B0aW9uUHJlc2VudCA9IGV4cGxvcmVyLmlzT3B0aW9uUHJlc2VudChFU0NBUEVfS0VZX1NUT1BTX0RSQUdHSU5HKTtcblxuICBpZiAoZXNjYXBlS2V5U3RvcHNEcmFnZ2luZ09wdGlvblByZXNlbnQpIHtcbiAgICB0aGlzLm9uS2V5RG93bihrZXlEb3duSGFuZGxlciwgdGhpcyk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQSxVQUFZO0lBRVEsUUFBZTtJQUNaLEtBQW1CO0lBRVgsVUFBaUI7Ozs7OztJQUV6QixrQkFBa0IsR0FKbEIsS0FBbUIsU0FJbEMsYUFBYSxFQUNiLHVCQUF1QixHQU5YLFFBQWUsU0FNM0IsdUJBQXVCLEVBQUUseUJBQXlCLEdBTnRDLFFBQWUsU0FNRix5QkFBeUI7U0FFakQsUUFBUTtTQUNWLGNBQWM7U0FFZCxVQUFVLENBQUMsZUFBZTtTQUMxQixjQUFjLENBQUMsbUJBQW1CO1NBQ2xDLGVBQWUsQ0FBQyxvQkFBb0I7O1NBR2xDLFdBQVc7U0FDYixnQkFBZ0IsQ0FBQyxvQkFBb0I7U0FDckMsZUFBZSxDQUFDLG1CQUFtQjtTQUNuQyxXQUFXLENBQUMsZUFBZTtTQUUzQixlQUFlOztTQUdiLFdBQVcsQ0FBQyxRQUFRLEVBQUUsU0FBUztRQUNoQyxlQUFlLFFBQVEsa0JBQWtCLElBQ3pDLCtCQUErQixHQUFHLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsU0FBUyxHQUN4RixTQUFTLEdBQUcsK0JBQStCLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1dBRWhELFNBQVM7O1NBR1QsYUFBYSxDQUFDLFFBQVEsRUFBRSxTQUFTO1FBQ2xDLFFBQVEsUUFBUSxXQUFXLElBQzNCLFNBQVMsU0FDVCw2QkFBNkIsUUFBUSwrQkFBK0IsSUFDcEUsUUFBUSxJQUFJLDZCQUE2QixFQUN6QyxlQUFlLEdBQUcsUUFBUSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsR0FDdkQsaUNBQWlDLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyx1QkFBdUI7U0FFckYsZUFBZTs7O1FBSWhCLDZCQUE2Qjs7O1FBSTdCLFFBQVEsSUFBSSxpQ0FBaUM7OztJQUlqRCxrQkFBa0IsQ0FBQyxJQUFJLE9BQU8sUUFBUSxFQUFFLFNBQVM7O1NBRzFDLGtCQUFrQjtRQUNuQixNQUFNLFFBQVEsU0FBUyxJQUN2QixlQUFlLEdBQUcsTUFBTSxDQUFHLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztXQUU3QixlQUFlOztBQUd4QixNQUFNLENBQUMsT0FBTztJQUNaLFFBQVEsRUFBUixRQUFRO0lBQ1IsV0FBVyxFQUFYLFdBQVc7SUFDWCxXQUFXLEVBQVgsV0FBVztJQUNYLGFBQWEsRUFBYixhQUFhO0lBQ2Isa0JBQWtCLEVBQWxCLGtCQUFrQjs7U0FHWCxjQUFjLENBQUMsS0FBSyxFQUFFLE9BQU87UUFDNUIsT0FBTyxHQUFLLEtBQUssQ0FBakIsT0FBTyxFQUNULFNBQVMsR0FBSSxPQUFPLEtBckVHLFVBQWlCO1FBdUUxQyxTQUFTO1lBQ0wsUUFBUSxRQUFRLFVBQVU7WUFFNUIsUUFBUTtnQkFDSixRQUFRLFFBQVEsV0FBVztZQUVqQyxRQUFRLENBQUMsY0FBYztpQkFFbEIsWUFBWTs7OztTQUtkLGVBQWUsQ0FBQyxRQUFRLEVBQUUsU0FBUztRQUNwQyxRQUFRLFFBQVEsV0FBVyxJQUMzQixTQUFTLFFBQVUsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO0lBRTVCLFFBQVEsQ0FBQyxRQUFRLENBQUMsU0FBUzs7U0FHcEIsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFNBQVM7UUFDeEMsUUFBUSxRQUFRLFdBQVcsSUFDM0IsbUNBQW1DLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyx5QkFBeUI7UUFFMUYsbUNBQW1DO2FBQ2hDLFVBQVUsQ0FBQyxjQUFjOzs7U0FJekIsb0JBQW9CLENBQUMsUUFBUSxFQUFFLFNBQVM7UUFDekMsUUFBUSxRQUFRLFdBQVcsSUFDM0IsbUNBQW1DLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyx5QkFBeUI7UUFFMUYsbUNBQW1DO2FBQ2hDLFNBQVMsQ0FBQyxjQUFjIn0=