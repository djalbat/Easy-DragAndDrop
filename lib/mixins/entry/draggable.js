"use strict";
var _options = _interopRequireDefault(require("../../options"));
var _draggable = _interopRequireDefault(require("../../mixins/draggable"));
var _constants = require("../../constants");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var superStartDragging = _draggable.default.startDragging, NO_DRAGGING_SUB_ENTRIES = _options.default.NO_DRAGGING_SUB_ENTRIES, ESCAPE_KEY_STOPS_DRAGGING = _options.default.ESCAPE_KEY_STOPS_DRAGGING;
function getCollapsedBounds() {
    var bounds = this.getBounds(), collapsedBounds = bounds; ///
    return collapsedBounds;
}
function isMouseOver(mouseTop, mouseLeft) {
    var collapsedBounds = this.getCollapsedBounds(), collapsedBoundsOverlappingMouse = collapsedBounds.isOverlappingMouse(mouseTop, mouseLeft), mouseOver = collapsedBoundsOverlappingMouse; ///
    return mouseOver;
}
function startDragging(mouseTop, mouseLeft) {
    var explorer = this.getExplorer(), draggableEntry = this, topmostDirectoryNameDraggableEntry = this.isTopmostDirectoryNameDraggableEntry(), subEntry = !topmostDirectoryNameDraggableEntry, startedDragging = explorer.hasStartedDragging(draggableEntry), noDraggingSubEntriesOptionPresent = explorer.isOptionPresent(NO_DRAGGING_SUB_ENTRIES);
    if (!startedDragging) {
        return;
    }
    if (topmostDirectoryNameDraggableEntry) {
        return;
    }
    if (subEntry && noDraggingSubEntriesOptionPresent) {
        return;
    }
    superStartDragging.call(this, mouseTop, mouseLeft);
}
function keyDownHandler(event, element) {
    var keyCode = event.keyCode, escapeKey = keyCode === _constants.ESCAPE_KEYCODE;
    if (escapeKey) {
        var dragging = this.isDragging();
        if (dragging) {
            var explorer = this.getExplorer();
            explorer.escapeDragging();
            this.stopDragging();
        }
    }
}
function draggingHandler(mouseTop, mouseLeft) {
    var explorer = this.getExplorer(), draggableEntry = this; ///
    explorer.dragging(draggableEntry);
}
function stopDraggingHandler(mouseTop, mouseLeft) {
    var explorer = this.getExplorer(), escapeKeyStopsDraggingOptionPresent = explorer.isOptionPresent(ESCAPE_KEY_STOPS_DRAGGING);
    if (escapeKeyStopsDraggingOptionPresent) {
        this.offKeyDown(this.keyDownHandler, this);
    }
}
function startDraggingHandler(mouseTop, mouseLeft) {
    var explorer = this.getExplorer(), escapeKeyStopsDraggingOptionPresent = explorer.isOptionPresent(ESCAPE_KEY_STOPS_DRAGGING);
    if (escapeKeyStopsDraggingOptionPresent) {
        this.onKeyDown(this.keyDownHandler, this);
    }
}
function didMount() {
    this.enableDragging();
    this.onDragging(this.draggingHandler, this);
    this.onStopDragging(this.stopDraggingHandler, this);
    this.onStartDragging(this.startDraggingHandler, this);
}
function willUnmount() {
    this.offStartDragging(this.startDraggingHandler, this);
    this.offStopDragging(this.stopDraggingHandler, this);
    this.offDragging(this.draggingHandler, this);
    this.disableDragging();
}
module.exports = {
    getCollapsedBounds: getCollapsedBounds,
    isMouseOver: isMouseOver,
    startDragging: startDragging,
    keyDownHandler: keyDownHandler,
    draggingHandler: draggingHandler,
    stopDraggingHandler: stopDraggingHandler,
    startDraggingHandler: startDraggingHandler,
    didMount: didMount,
    willUnmount: willUnmount
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9taXhpbnMvZW50cnkvZHJhZ2dhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgb3B0aW9ucyBmcm9tIFwiLi4vLi4vb3B0aW9uc1wiO1xuaW1wb3J0IGRyYWdnYWJsZU1peGlucyBmcm9tIFwiLi4vLi4vbWl4aW5zL2RyYWdnYWJsZVwiO1xuXG5pbXBvcnQgeyBFU0NBUEVfS0VZQ09ERSB9IGZyb20gXCIuLi8uLi9jb25zdGFudHNcIjtcblxuY29uc3QgeyBzdGFydERyYWdnaW5nOiBzdXBlclN0YXJ0RHJhZ2dpbmcgfSA9IGRyYWdnYWJsZU1peGlucyxcbiAgICAgIHsgTk9fRFJBR0dJTkdfU1VCX0VOVFJJRVMsIEVTQ0FQRV9LRVlfU1RPUFNfRFJBR0dJTkcgfSA9IG9wdGlvbnM7XG5cbmZ1bmN0aW9uIGdldENvbGxhcHNlZEJvdW5kcygpIHtcbiAgY29uc3QgYm91bmRzID0gdGhpcy5nZXRCb3VuZHMoKSxcbiAgICAgICAgY29sbGFwc2VkQm91bmRzID0gYm91bmRzOyAgLy8vXG5cbiAgcmV0dXJuIGNvbGxhcHNlZEJvdW5kcztcbn1cblxuZnVuY3Rpb24gaXNNb3VzZU92ZXIobW91c2VUb3AsIG1vdXNlTGVmdCkge1xuICBjb25zdCBjb2xsYXBzZWRCb3VuZHMgPSB0aGlzLmdldENvbGxhcHNlZEJvdW5kcygpLFxuICAgICAgICBjb2xsYXBzZWRCb3VuZHNPdmVybGFwcGluZ01vdXNlID0gY29sbGFwc2VkQm91bmRzLmlzT3ZlcmxhcHBpbmdNb3VzZShtb3VzZVRvcCwgbW91c2VMZWZ0KSxcbiAgICAgICAgbW91c2VPdmVyID0gY29sbGFwc2VkQm91bmRzT3ZlcmxhcHBpbmdNb3VzZTsgIC8vL1xuXG4gIHJldHVybiBtb3VzZU92ZXI7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0RHJhZ2dpbmcobW91c2VUb3AsIG1vdXNlTGVmdCkge1xuICBjb25zdCBleHBsb3JlciA9IHRoaXMuZ2V0RXhwbG9yZXIoKSxcbiAgICAgICAgZHJhZ2dhYmxlRW50cnkgPSB0aGlzLCAgLy8vXG4gICAgICAgIHRvcG1vc3REaXJlY3RvcnlOYW1lRHJhZ2dhYmxlRW50cnkgPSB0aGlzLmlzVG9wbW9zdERpcmVjdG9yeU5hbWVEcmFnZ2FibGVFbnRyeSgpLFxuICAgICAgICBzdWJFbnRyeSA9ICF0b3Btb3N0RGlyZWN0b3J5TmFtZURyYWdnYWJsZUVudHJ5LFxuICAgICAgICBzdGFydGVkRHJhZ2dpbmcgPSBleHBsb3Jlci5oYXNTdGFydGVkRHJhZ2dpbmcoZHJhZ2dhYmxlRW50cnkpLFxuICAgICAgICBub0RyYWdnaW5nU3ViRW50cmllc09wdGlvblByZXNlbnQgPSBleHBsb3Jlci5pc09wdGlvblByZXNlbnQoTk9fRFJBR0dJTkdfU1VCX0VOVFJJRVMpO1xuXG4gIGlmICghc3RhcnRlZERyYWdnaW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRvcG1vc3REaXJlY3RvcnlOYW1lRHJhZ2dhYmxlRW50cnkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc3ViRW50cnkgJiYgbm9EcmFnZ2luZ1N1YkVudHJpZXNPcHRpb25QcmVzZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3VwZXJTdGFydERyYWdnaW5nLmNhbGwodGhpcywgbW91c2VUb3AsIG1vdXNlTGVmdCk7XG59XG5cbmZ1bmN0aW9uIGtleURvd25IYW5kbGVyKGV2ZW50LCBlbGVtZW50KSB7XG4gIGNvbnN0IHsga2V5Q29kZSB9ID0gZXZlbnQsXG4gICAgICAgIGVzY2FwZUtleSA9IChrZXlDb2RlID09PSBFU0NBUEVfS0VZQ09ERSk7XG5cbiAgaWYgKGVzY2FwZUtleSkge1xuICAgIGNvbnN0IGRyYWdnaW5nID0gdGhpcy5pc0RyYWdnaW5nKCk7XG5cbiAgICBpZiAoZHJhZ2dpbmcpIHtcbiAgICAgIGNvbnN0IGV4cGxvcmVyID0gdGhpcy5nZXRFeHBsb3JlcigpO1xuXG4gICAgICBleHBsb3Jlci5lc2NhcGVEcmFnZ2luZygpO1xuXG4gICAgICB0aGlzLnN0b3BEcmFnZ2luZygpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkcmFnZ2luZ0hhbmRsZXIobW91c2VUb3AsIG1vdXNlTGVmdCkge1xuICBjb25zdCBleHBsb3JlciA9IHRoaXMuZ2V0RXhwbG9yZXIoKSxcbiAgICAgICAgZHJhZ2dhYmxlRW50cnkgPSB0aGlzOyAgLy8vXG5cbiAgZXhwbG9yZXIuZHJhZ2dpbmcoZHJhZ2dhYmxlRW50cnkpO1xufVxuXG5mdW5jdGlvbiBzdG9wRHJhZ2dpbmdIYW5kbGVyKG1vdXNlVG9wLCBtb3VzZUxlZnQpIHtcbiAgY29uc3QgZXhwbG9yZXIgPSB0aGlzLmdldEV4cGxvcmVyKCksXG4gICAgICAgIGVzY2FwZUtleVN0b3BzRHJhZ2dpbmdPcHRpb25QcmVzZW50ID0gZXhwbG9yZXIuaXNPcHRpb25QcmVzZW50KEVTQ0FQRV9LRVlfU1RPUFNfRFJBR0dJTkcpO1xuXG4gIGlmIChlc2NhcGVLZXlTdG9wc0RyYWdnaW5nT3B0aW9uUHJlc2VudCkge1xuICAgIHRoaXMub2ZmS2V5RG93bih0aGlzLmtleURvd25IYW5kbGVyLCB0aGlzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydERyYWdnaW5nSGFuZGxlcihtb3VzZVRvcCwgbW91c2VMZWZ0KSB7XG4gIGNvbnN0IGV4cGxvcmVyID0gdGhpcy5nZXRFeHBsb3JlcigpLFxuICAgICAgICBlc2NhcGVLZXlTdG9wc0RyYWdnaW5nT3B0aW9uUHJlc2VudCA9IGV4cGxvcmVyLmlzT3B0aW9uUHJlc2VudChFU0NBUEVfS0VZX1NUT1BTX0RSQUdHSU5HKTtcblxuICBpZiAoZXNjYXBlS2V5U3RvcHNEcmFnZ2luZ09wdGlvblByZXNlbnQpIHtcbiAgICB0aGlzLm9uS2V5RG93bih0aGlzLmtleURvd25IYW5kbGVyLCB0aGlzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkaWRNb3VudCgpIHtcbiAgdGhpcy5lbmFibGVEcmFnZ2luZygpO1xuXG4gIHRoaXMub25EcmFnZ2luZyh0aGlzLmRyYWdnaW5nSGFuZGxlciwgdGhpcyk7XG4gIHRoaXMub25TdG9wRHJhZ2dpbmcodGhpcy5zdG9wRHJhZ2dpbmdIYW5kbGVyLCB0aGlzKTtcbiAgdGhpcy5vblN0YXJ0RHJhZ2dpbmcodGhpcy5zdGFydERyYWdnaW5nSGFuZGxlciwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIHdpbGxVbm1vdW50KCkge1xuICB0aGlzLm9mZlN0YXJ0RHJhZ2dpbmcodGhpcy5zdGFydERyYWdnaW5nSGFuZGxlciwgdGhpcyk7XG4gIHRoaXMub2ZmU3RvcERyYWdnaW5nKHRoaXMuc3RvcERyYWdnaW5nSGFuZGxlciwgdGhpcyk7XG4gIHRoaXMub2ZmRHJhZ2dpbmcodGhpcy5kcmFnZ2luZ0hhbmRsZXIsIHRoaXMpO1xuXG4gIHRoaXMuZGlzYWJsZURyYWdnaW5nKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb2xsYXBzZWRCb3VuZHMsXG4gIGlzTW91c2VPdmVyLFxuICBzdGFydERyYWdnaW5nLFxuICBrZXlEb3duSGFuZGxlcixcbiAgZHJhZ2dpbmdIYW5kbGVyLFxuICBzdG9wRHJhZ2dpbmdIYW5kbGVyLFxuICBzdGFydERyYWdnaW5nSGFuZGxlcixcbiAgZGlkTW91bnQsXG4gIHdpbGxVbm1vdW50XG59O1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFVBQVk7SUFFUSxRQUFlO0lBQ1AsVUFBd0I7SUFFckIsVUFBaUI7Ozs7OztJQUV6QixrQkFBa0IsR0FKYixVQUF3QixTQUk1QyxhQUFhLEVBQ2IsdUJBQXVCLEdBTlgsUUFBZSxTQU0zQix1QkFBdUIsRUFBRSx5QkFBeUIsR0FOdEMsUUFBZSxTQU1GLHlCQUF5QjtTQUVqRCxrQkFBa0I7UUFDbkIsTUFBTSxRQUFRLFNBQVMsSUFDdkIsZUFBZSxHQUFHLE1BQU0sQ0FBRyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7V0FFN0IsZUFBZTs7U0FHZixXQUFXLENBQUMsUUFBUSxFQUFFLFNBQVM7UUFDaEMsZUFBZSxRQUFRLGtCQUFrQixJQUN6QywrQkFBK0IsR0FBRyxlQUFlLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLFNBQVMsR0FDeEYsU0FBUyxHQUFHLCtCQUErQixDQUFHLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztXQUVoRCxTQUFTOztTQUdULGFBQWEsQ0FBQyxRQUFRLEVBQUUsU0FBUztRQUNsQyxRQUFRLFFBQVEsV0FBVyxJQUMzQixjQUFjLFNBQ2Qsa0NBQWtDLFFBQVEsb0NBQW9DLElBQzlFLFFBQVEsSUFBSSxrQ0FBa0MsRUFDOUMsZUFBZSxHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLEdBQzVELGlDQUFpQyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsdUJBQXVCO1NBRXJGLGVBQWU7OztRQUloQixrQ0FBa0M7OztRQUlsQyxRQUFRLElBQUksaUNBQWlDOzs7SUFJakQsa0JBQWtCLENBQUMsSUFBSSxPQUFPLFFBQVEsRUFBRSxTQUFTOztTQUcxQyxjQUFjLENBQUMsS0FBSyxFQUFFLE9BQU87UUFDNUIsT0FBTyxHQUFLLEtBQUssQ0FBakIsT0FBTyxFQUNULFNBQVMsR0FBSSxPQUFPLEtBN0NHLFVBQWlCO1FBK0MxQyxTQUFTO1lBQ0wsUUFBUSxRQUFRLFVBQVU7WUFFNUIsUUFBUTtnQkFDSixRQUFRLFFBQVEsV0FBVztZQUVqQyxRQUFRLENBQUMsY0FBYztpQkFFbEIsWUFBWTs7OztTQUtkLGVBQWUsQ0FBQyxRQUFRLEVBQUUsU0FBUztRQUNwQyxRQUFRLFFBQVEsV0FBVyxJQUMzQixjQUFjLFFBQVUsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO0lBRWpDLFFBQVEsQ0FBQyxRQUFRLENBQUMsY0FBYzs7U0FHekIsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFNBQVM7UUFDeEMsUUFBUSxRQUFRLFdBQVcsSUFDM0IsbUNBQW1DLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyx5QkFBeUI7UUFFMUYsbUNBQW1DO2FBQ2hDLFVBQVUsTUFBTSxjQUFjOzs7U0FJOUIsb0JBQW9CLENBQUMsUUFBUSxFQUFFLFNBQVM7UUFDekMsUUFBUSxRQUFRLFdBQVcsSUFDM0IsbUNBQW1DLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyx5QkFBeUI7UUFFMUYsbUNBQW1DO2FBQ2hDLFNBQVMsTUFBTSxjQUFjOzs7U0FJN0IsUUFBUTtTQUNWLGNBQWM7U0FFZCxVQUFVLE1BQU0sZUFBZTtTQUMvQixjQUFjLE1BQU0sbUJBQW1CO1NBQ3ZDLGVBQWUsTUFBTSxvQkFBb0I7O1NBR3ZDLFdBQVc7U0FDYixnQkFBZ0IsTUFBTSxvQkFBb0I7U0FDMUMsZUFBZSxNQUFNLG1CQUFtQjtTQUN4QyxXQUFXLE1BQU0sZUFBZTtTQUVoQyxlQUFlOztBQUd0QixNQUFNLENBQUMsT0FBTztJQUNaLGtCQUFrQixFQUFsQixrQkFBa0I7SUFDbEIsV0FBVyxFQUFYLFdBQVc7SUFDWCxhQUFhLEVBQWIsYUFBYTtJQUNiLGNBQWMsRUFBZCxjQUFjO0lBQ2QsZUFBZSxFQUFmLGVBQWU7SUFDZixtQkFBbUIsRUFBbkIsbUJBQW1CO0lBQ25CLG9CQUFvQixFQUFwQixvQkFBb0I7SUFDcEIsUUFBUSxFQUFSLFFBQVE7SUFDUixXQUFXLEVBQVgsV0FBVyJ9