"use strict";
var _options = _interopRequireDefault(require("../../options"));
var _draggable = _interopRequireDefault(require("../../mixins/draggable"));
var _constants = require("../../constants");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var superStartDragging = _draggable.default.startDragging, NO_DRAGGING_SUB_ENTRIES = _options.default.NO_DRAGGING_SUB_ENTRIES, ESCAPE_KEY_STOPS_DRAGGING = _options.default.ESCAPE_KEY_STOPS_DRAGGING;
function didMount() {
    this.enableDragging();
    this.onDragging(draggingHandler, this);
    this.onStopDragging(stopDraggingHandler, this);
    this.onStartDragging(startDraggingHandler, this);
}
function willUnmount() {
    this.offStartDragging(startDraggingHandler, this);
    this.offStopDragging(stopDraggingHandler, this);
    this.offDragging(draggingHandler, this);
    this.disableDragging();
}
function isMouseOver(mouseTop, mouseLeft) {
    var collapsedBounds = this.getCollapsedBounds(), collapsedBoundsOverlappingMouse = collapsedBounds.isOverlappingMouse(mouseTop, mouseLeft), mouseOver = collapsedBoundsOverlappingMouse; ///
    return mouseOver;
}
function startDragging(mouseTop, mouseLeft) {
    var explorer = this.getExplorer(), draggableEntry = this, topmostDirectoryNameDraggableEntry = this.isTopmostDirectoryNameDraggableEntry(), subEntry = !topmostDirectoryNameDraggableEntry, startedDragging = explorer.hasStartedDragging(draggableEntry), noDraggingSubEntriesOptionPresent = explorer.isOptionPresent(NO_DRAGGING_SUB_ENTRIES);
    if (!startedDragging) {
        return;
    }
    if (topmostDirectoryNameDraggableEntry) {
        return;
    }
    if (subEntry && noDraggingSubEntriesOptionPresent) {
        return;
    }
    superStartDragging.call(this, mouseTop, mouseLeft);
}
function getCollapsedBounds() {
    var bounds = this.getBounds(), collapsedBounds = bounds; ///
    return collapsedBounds;
}
module.exports = {
    didMount: didMount,
    willUnmount: willUnmount,
    isMouseOver: isMouseOver,
    startDragging: startDragging,
    getCollapsedBounds: getCollapsedBounds
};
function keyDownHandler(event, element) {
    var keyCode = event.keyCode, escapeKey = keyCode === _constants.ESCAPE_KEYCODE;
    if (escapeKey) {
        var dragging = this.isDragging();
        if (dragging) {
            var explorer = this.getExplorer();
            explorer.escapeDragging();
            this.stopDragging();
        }
    }
}
function draggingHandler(mouseTop, mouseLeft) {
    var explorer = this.getExplorer(), draggableEntry = this; ///
    explorer.dragging(draggableEntry);
}
function stopDraggingHandler(mouseTop, mouseLeft) {
    var explorer = this.getExplorer(), escapeKeyStopsDraggingOptionPresent = explorer.isOptionPresent(ESCAPE_KEY_STOPS_DRAGGING);
    if (escapeKeyStopsDraggingOptionPresent) {
        this.offKeyDown(keyDownHandler, this);
    }
}
function startDraggingHandler(mouseTop, mouseLeft) {
    var explorer = this.getExplorer(), escapeKeyStopsDraggingOptionPresent = explorer.isOptionPresent(ESCAPE_KEY_STOPS_DRAGGING);
    if (escapeKeyStopsDraggingOptionPresent) {
        this.onKeyDown(keyDownHandler, this);
    }
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9taXhpbnMvZW50cnkvZHJhZ2dhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgb3B0aW9ucyBmcm9tIFwiLi4vLi4vb3B0aW9uc1wiO1xuaW1wb3J0IGRyYWdnYWJsZU1peGlucyBmcm9tIFwiLi4vLi4vbWl4aW5zL2RyYWdnYWJsZVwiO1xuXG5pbXBvcnQgeyBFU0NBUEVfS0VZQ09ERSB9IGZyb20gXCIuLi8uLi9jb25zdGFudHNcIjtcblxuY29uc3QgeyBzdGFydERyYWdnaW5nOiBzdXBlclN0YXJ0RHJhZ2dpbmcgfSA9IGRyYWdnYWJsZU1peGlucyxcbiAgICAgIHsgTk9fRFJBR0dJTkdfU1VCX0VOVFJJRVMsIEVTQ0FQRV9LRVlfU1RPUFNfRFJBR0dJTkcgfSA9IG9wdGlvbnM7XG5cbmZ1bmN0aW9uIGRpZE1vdW50KCkge1xuICB0aGlzLmVuYWJsZURyYWdnaW5nKCk7XG5cbiAgdGhpcy5vbkRyYWdnaW5nKGRyYWdnaW5nSGFuZGxlciwgdGhpcyk7XG4gIHRoaXMub25TdG9wRHJhZ2dpbmcoc3RvcERyYWdnaW5nSGFuZGxlciwgdGhpcyk7XG4gIHRoaXMub25TdGFydERyYWdnaW5nKHN0YXJ0RHJhZ2dpbmdIYW5kbGVyLCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gd2lsbFVubW91bnQoKSB7XG4gIHRoaXMub2ZmU3RhcnREcmFnZ2luZyhzdGFydERyYWdnaW5nSGFuZGxlciwgdGhpcyk7XG4gIHRoaXMub2ZmU3RvcERyYWdnaW5nKHN0b3BEcmFnZ2luZ0hhbmRsZXIsIHRoaXMpO1xuICB0aGlzLm9mZkRyYWdnaW5nKGRyYWdnaW5nSGFuZGxlciwgdGhpcyk7XG5cbiAgdGhpcy5kaXNhYmxlRHJhZ2dpbmcoKTtcbn1cblxuZnVuY3Rpb24gaXNNb3VzZU92ZXIobW91c2VUb3AsIG1vdXNlTGVmdCkge1xuICBjb25zdCBjb2xsYXBzZWRCb3VuZHMgPSB0aGlzLmdldENvbGxhcHNlZEJvdW5kcygpLFxuICAgICAgICBjb2xsYXBzZWRCb3VuZHNPdmVybGFwcGluZ01vdXNlID0gY29sbGFwc2VkQm91bmRzLmlzT3ZlcmxhcHBpbmdNb3VzZShtb3VzZVRvcCwgbW91c2VMZWZ0KSxcbiAgICAgICAgbW91c2VPdmVyID0gY29sbGFwc2VkQm91bmRzT3ZlcmxhcHBpbmdNb3VzZTsgIC8vL1xuXG4gIHJldHVybiBtb3VzZU92ZXI7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0RHJhZ2dpbmcobW91c2VUb3AsIG1vdXNlTGVmdCkge1xuICBjb25zdCBleHBsb3JlciA9IHRoaXMuZ2V0RXhwbG9yZXIoKSxcbiAgICAgICAgZHJhZ2dhYmxlRW50cnkgPSB0aGlzLCAgLy8vXG4gICAgICAgIHRvcG1vc3REaXJlY3RvcnlOYW1lRHJhZ2dhYmxlRW50cnkgPSB0aGlzLmlzVG9wbW9zdERpcmVjdG9yeU5hbWVEcmFnZ2FibGVFbnRyeSgpLFxuICAgICAgICBzdWJFbnRyeSA9ICF0b3Btb3N0RGlyZWN0b3J5TmFtZURyYWdnYWJsZUVudHJ5LFxuICAgICAgICBzdGFydGVkRHJhZ2dpbmcgPSBleHBsb3Jlci5oYXNTdGFydGVkRHJhZ2dpbmcoZHJhZ2dhYmxlRW50cnkpLFxuICAgICAgICBub0RyYWdnaW5nU3ViRW50cmllc09wdGlvblByZXNlbnQgPSBleHBsb3Jlci5pc09wdGlvblByZXNlbnQoTk9fRFJBR0dJTkdfU1VCX0VOVFJJRVMpO1xuXG4gIGlmICghc3RhcnRlZERyYWdnaW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRvcG1vc3REaXJlY3RvcnlOYW1lRHJhZ2dhYmxlRW50cnkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc3ViRW50cnkgJiYgbm9EcmFnZ2luZ1N1YkVudHJpZXNPcHRpb25QcmVzZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3VwZXJTdGFydERyYWdnaW5nLmNhbGwodGhpcywgbW91c2VUb3AsIG1vdXNlTGVmdCk7XG59XG5cbmZ1bmN0aW9uIGdldENvbGxhcHNlZEJvdW5kcygpIHtcbiAgY29uc3QgYm91bmRzID0gdGhpcy5nZXRCb3VuZHMoKSxcbiAgICAgICAgY29sbGFwc2VkQm91bmRzID0gYm91bmRzOyAgLy8vXG5cbiAgcmV0dXJuIGNvbGxhcHNlZEJvdW5kcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRpZE1vdW50LFxuICB3aWxsVW5tb3VudCxcbiAgaXNNb3VzZU92ZXIsXG4gIHN0YXJ0RHJhZ2dpbmcsXG4gIGdldENvbGxhcHNlZEJvdW5kc1xufTtcblxuZnVuY3Rpb24ga2V5RG93bkhhbmRsZXIoZXZlbnQsIGVsZW1lbnQpIHtcbiAgY29uc3QgeyBrZXlDb2RlIH0gPSBldmVudCxcbiAgICAgICAgZXNjYXBlS2V5ID0gKGtleUNvZGUgPT09IEVTQ0FQRV9LRVlDT0RFKTtcblxuICBpZiAoZXNjYXBlS2V5KSB7XG4gICAgY29uc3QgZHJhZ2dpbmcgPSB0aGlzLmlzRHJhZ2dpbmcoKTtcblxuICAgIGlmIChkcmFnZ2luZykge1xuICAgICAgY29uc3QgZXhwbG9yZXIgPSB0aGlzLmdldEV4cGxvcmVyKCk7XG5cbiAgICAgIGV4cGxvcmVyLmVzY2FwZURyYWdnaW5nKCk7XG5cbiAgICAgIHRoaXMuc3RvcERyYWdnaW5nKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRyYWdnaW5nSGFuZGxlcihtb3VzZVRvcCwgbW91c2VMZWZ0KSB7XG4gIGNvbnN0IGV4cGxvcmVyID0gdGhpcy5nZXRFeHBsb3JlcigpLFxuICAgICAgICBkcmFnZ2FibGVFbnRyeSA9IHRoaXM7ICAvLy9cblxuICBleHBsb3Jlci5kcmFnZ2luZyhkcmFnZ2FibGVFbnRyeSk7XG59XG5cbmZ1bmN0aW9uIHN0b3BEcmFnZ2luZ0hhbmRsZXIobW91c2VUb3AsIG1vdXNlTGVmdCkge1xuICBjb25zdCBleHBsb3JlciA9IHRoaXMuZ2V0RXhwbG9yZXIoKSxcbiAgICAgICAgZXNjYXBlS2V5U3RvcHNEcmFnZ2luZ09wdGlvblByZXNlbnQgPSBleHBsb3Jlci5pc09wdGlvblByZXNlbnQoRVNDQVBFX0tFWV9TVE9QU19EUkFHR0lORyk7XG5cbiAgaWYgKGVzY2FwZUtleVN0b3BzRHJhZ2dpbmdPcHRpb25QcmVzZW50KSB7XG4gICAgdGhpcy5vZmZLZXlEb3duKGtleURvd25IYW5kbGVyLCB0aGlzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydERyYWdnaW5nSGFuZGxlcihtb3VzZVRvcCwgbW91c2VMZWZ0KSB7XG4gIGNvbnN0IGV4cGxvcmVyID0gdGhpcy5nZXRFeHBsb3JlcigpLFxuICAgICAgICBlc2NhcGVLZXlTdG9wc0RyYWdnaW5nT3B0aW9uUHJlc2VudCA9IGV4cGxvcmVyLmlzT3B0aW9uUHJlc2VudChFU0NBUEVfS0VZX1NUT1BTX0RSQUdHSU5HKTtcblxuICBpZiAoZXNjYXBlS2V5U3RvcHNEcmFnZ2luZ09wdGlvblByZXNlbnQpIHtcbiAgICB0aGlzLm9uS2V5RG93bihrZXlEb3duSGFuZGxlciwgdGhpcyk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQSxVQUFZO0lBRVEsUUFBZTtJQUNQLFVBQXdCO0lBRXJCLFVBQWlCOzs7Ozs7SUFFekIsa0JBQWtCLEdBSmIsVUFBd0IsU0FJNUMsYUFBYSxFQUNiLHVCQUF1QixHQU5YLFFBQWUsU0FNM0IsdUJBQXVCLEVBQUUseUJBQXlCLEdBTnRDLFFBQWUsU0FNRix5QkFBeUI7U0FFakQsUUFBUTtTQUNWLGNBQWM7U0FFZCxVQUFVLENBQUMsZUFBZTtTQUMxQixjQUFjLENBQUMsbUJBQW1CO1NBQ2xDLGVBQWUsQ0FBQyxvQkFBb0I7O1NBR2xDLFdBQVc7U0FDYixnQkFBZ0IsQ0FBQyxvQkFBb0I7U0FDckMsZUFBZSxDQUFDLG1CQUFtQjtTQUNuQyxXQUFXLENBQUMsZUFBZTtTQUUzQixlQUFlOztTQUdiLFdBQVcsQ0FBQyxRQUFRLEVBQUUsU0FBUztRQUNoQyxlQUFlLFFBQVEsa0JBQWtCLElBQ3pDLCtCQUErQixHQUFHLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsU0FBUyxHQUN4RixTQUFTLEdBQUcsK0JBQStCLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1dBRWhELFNBQVM7O1NBR1QsYUFBYSxDQUFDLFFBQVEsRUFBRSxTQUFTO1FBQ2xDLFFBQVEsUUFBUSxXQUFXLElBQzNCLGNBQWMsU0FDZCxrQ0FBa0MsUUFBUSxvQ0FBb0MsSUFDOUUsUUFBUSxJQUFJLGtDQUFrQyxFQUM5QyxlQUFlLEdBQUcsUUFBUSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsR0FDNUQsaUNBQWlDLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyx1QkFBdUI7U0FFckYsZUFBZTs7O1FBSWhCLGtDQUFrQzs7O1FBSWxDLFFBQVEsSUFBSSxpQ0FBaUM7OztJQUlqRCxrQkFBa0IsQ0FBQyxJQUFJLE9BQU8sUUFBUSxFQUFFLFNBQVM7O1NBRzFDLGtCQUFrQjtRQUNuQixNQUFNLFFBQVEsU0FBUyxJQUN2QixlQUFlLEdBQUcsTUFBTSxDQUFHLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztXQUU3QixlQUFlOztBQUd4QixNQUFNLENBQUMsT0FBTztJQUNaLFFBQVEsRUFBUixRQUFRO0lBQ1IsV0FBVyxFQUFYLFdBQVc7SUFDWCxXQUFXLEVBQVgsV0FBVztJQUNYLGFBQWEsRUFBYixhQUFhO0lBQ2Isa0JBQWtCLEVBQWxCLGtCQUFrQjs7U0FHWCxjQUFjLENBQUMsS0FBSyxFQUFFLE9BQU87UUFDNUIsT0FBTyxHQUFLLEtBQUssQ0FBakIsT0FBTyxFQUNULFNBQVMsR0FBSSxPQUFPLEtBckVHLFVBQWlCO1FBdUUxQyxTQUFTO1lBQ0wsUUFBUSxRQUFRLFVBQVU7WUFFNUIsUUFBUTtnQkFDSixRQUFRLFFBQVEsV0FBVztZQUVqQyxRQUFRLENBQUMsY0FBYztpQkFFbEIsWUFBWTs7OztTQUtkLGVBQWUsQ0FBQyxRQUFRLEVBQUUsU0FBUztRQUNwQyxRQUFRLFFBQVEsV0FBVyxJQUMzQixjQUFjLFFBQVUsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO0lBRWpDLFFBQVEsQ0FBQyxRQUFRLENBQUMsY0FBYzs7U0FHekIsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFNBQVM7UUFDeEMsUUFBUSxRQUFRLFdBQVcsSUFDM0IsbUNBQW1DLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyx5QkFBeUI7UUFFMUYsbUNBQW1DO2FBQ2hDLFVBQVUsQ0FBQyxjQUFjOzs7U0FJekIsb0JBQW9CLENBQUMsUUFBUSxFQUFFLFNBQVM7UUFDekMsUUFBUSxRQUFRLFdBQVcsSUFDM0IsbUNBQW1DLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyx5QkFBeUI7UUFFMUYsbUNBQW1DO2FBQ2hDLFNBQVMsQ0FBQyxjQUFjIn0=