'use strict';

var easy = require('easy');

var options = require('./options'),
    Explorer = require('./explorer'),
    RubbishBin = require('./rubbishBin');

var Body = easy.Body,
    React = easy.React,
    NO_DRAGGING_WITHIN = options.NO_DRAGGING_WITHIN,
    NO_DRAGGING_SUB_ENTRIES = options.NO_DRAGGING_SUB_ENTRIES;


var openHandler = function openHandler(filePath) {
  alert(filePath);
},
    moveHandler = function moveHandler(pathMaps, done) {
  done();
},
    removeHandler = function removeHandler(pathMaps, done) {
  pathMaps.forEach(function (pathMap) {
    var sourcePath = pathMap['sourcePath'];

    pathMap['targetPath'] = sourcePath; ///
  });

  done();
};

var explorer = React.createElement(Explorer, { topmostDirectoryName: 'explorer', onOpen: openHandler, onMove: moveHandler }),
    rubbishBin = React.createElement(RubbishBin, { onRemove: removeHandler });

explorer.addDropTarget(rubbishBin);

rubbishBin.addDropTarget(explorer);

explorer.addDirectoryPath('explorer/directory1');
explorer.addDirectoryPath('explorer/directory2');

explorer.addFilePath('explorer/directory1/file1.txt');
explorer.addFilePath('explorer/directory1/file2.txt');
explorer.addFilePath('explorer/directory2/file3.txt');

var body = new Body();

body.append(rubbishBin);

body.append(React.createElement('br', null));

body.append(explorer);

/*
const openHandler = (filePath) => {
        alert(filePath)
      },
      moveHandler = (pathMaps, done) => {
        done();
      },
      removeHandler = (pathMaps, done) => {
        done();
      };

const body = new Body(),
      explorer1 =

        <Explorer topmostDirectoryName="explorer1" onOpen={openHandler} onMove={moveHandler} options={{ NO_DRAGGING_WITHIN }} />

      ,
      explorer2 =

        <Explorer topmostDirectoryName="explorer2" onOpen={openHandler} onMove={moveHandler} options={{ NO_DRAGGING_SUB_ENTRIES }} />

      ,
      rubbishBin =

        <RubbishBin onRemove={removeHandler} />

      ;

body.append(rubbishBin);

body.append(<br />);

body.append(explorer1);

body.append(<br />);

body.append(explorer2);

explorer1.addDropTarget(rubbishBin);

explorer1.addDropTarget(explorer2);

explorer2.addDropTarget(rubbishBin);

explorer2.addDropTarget(explorer1);

rubbishBin.addDropTarget(explorer1);

rubbishBin.addDropTarget(explorer2);

explorer1.addFilePath('explorer1/file1.txt');
explorer1.addFilePath('explorer1/directory1/file2.txt');
explorer2.addFilePath('explorer2/directory2/file3.txt');
*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9leGFtcGxlLmpzIl0sIm5hbWVzIjpbImVhc3kiLCJyZXF1aXJlIiwib3B0aW9ucyIsIkV4cGxvcmVyIiwiUnViYmlzaEJpbiIsIkJvZHkiLCJSZWFjdCIsIk5PX0RSQUdHSU5HX1dJVEhJTiIsIk5PX0RSQUdHSU5HX1NVQl9FTlRSSUVTIiwib3BlbkhhbmRsZXIiLCJmaWxlUGF0aCIsImFsZXJ0IiwibW92ZUhhbmRsZXIiLCJwYXRoTWFwcyIsImRvbmUiLCJyZW1vdmVIYW5kbGVyIiwiZm9yRWFjaCIsInBhdGhNYXAiLCJzb3VyY2VQYXRoIiwiZXhwbG9yZXIiLCJydWJiaXNoQmluIiwiYWRkRHJvcFRhcmdldCIsImFkZERpcmVjdG9yeVBhdGgiLCJhZGRGaWxlUGF0aCIsImJvZHkiLCJhcHBlbmQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLE9BQU9DLFFBQVEsTUFBUixDQUFiOztBQUVBLElBQU1DLFVBQVVELFFBQVEsV0FBUixDQUFoQjtBQUFBLElBQ01FLFdBQVdGLFFBQVEsWUFBUixDQURqQjtBQUFBLElBRU1HLGFBQWFILFFBQVEsY0FBUixDQUZuQjs7SUFJUUksSSxHQUFnQkwsSSxDQUFoQkssSTtJQUFNQyxLLEdBQVVOLEksQ0FBVk0sSztJQUNOQyxrQixHQUFnREwsTyxDQUFoREssa0I7SUFBb0JDLHVCLEdBQTRCTixPLENBQTVCTSx1Qjs7O0FBRTVCLElBQU1DLGNBQWMsU0FBZEEsV0FBYyxDQUFDQyxRQUFELEVBQWM7QUFDNUJDLFFBQU1ELFFBQU47QUFDQyxDQUZQO0FBQUEsSUFHTUUsY0FBYyxTQUFkQSxXQUFjLENBQUNDLFFBQUQsRUFBV0MsSUFBWCxFQUFvQjtBQUNoQ0E7QUFDRCxDQUxQO0FBQUEsSUFNTUMsZ0JBQWdCLFNBQWhCQSxhQUFnQixDQUFDRixRQUFELEVBQVdDLElBQVgsRUFBb0I7QUFDbENELFdBQVNHLE9BQVQsQ0FBaUIsVUFBU0MsT0FBVCxFQUFrQjtBQUNqQyxRQUFNQyxhQUFhRCxRQUFRLFlBQVIsQ0FBbkI7O0FBRUFBLFlBQVEsWUFBUixJQUF3QkMsVUFBeEIsQ0FIaUMsQ0FHRztBQUNyQyxHQUpEOztBQU1BSjtBQUNELENBZFA7O0FBZ0JBLElBQU1LLFdBRUUsb0JBQUMsUUFBRCxJQUFVLHNCQUFxQixVQUEvQixFQUEwQyxRQUFRVixXQUFsRCxFQUErRCxRQUFRRyxXQUF2RSxHQUZSO0FBQUEsSUFLTVEsYUFFRSxvQkFBQyxVQUFELElBQVksVUFBVUwsYUFBdEIsR0FQUjs7QUFXQUksU0FBU0UsYUFBVCxDQUF1QkQsVUFBdkI7O0FBRUFBLFdBQVdDLGFBQVgsQ0FBeUJGLFFBQXpCOztBQUVBQSxTQUFTRyxnQkFBVCxDQUEwQixxQkFBMUI7QUFDQUgsU0FBU0csZ0JBQVQsQ0FBMEIscUJBQTFCOztBQUVBSCxTQUFTSSxXQUFULENBQXFCLCtCQUFyQjtBQUNBSixTQUFTSSxXQUFULENBQXFCLCtCQUFyQjtBQUNBSixTQUFTSSxXQUFULENBQXFCLCtCQUFyQjs7QUFFQSxJQUFNQyxPQUFPLElBQUluQixJQUFKLEVBQWI7O0FBRUFtQixLQUFLQyxNQUFMLENBQVlMLFVBQVo7O0FBRUFJLEtBQUtDLE1BQUwsQ0FBWSwrQkFBWjs7QUFFQUQsS0FBS0MsTUFBTCxDQUFZTixRQUFaOztBQUVBIiwiZmlsZSI6ImV4YW1wbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGVhc3kgPSByZXF1aXJlKCdlYXN5Jyk7XG5cbmNvbnN0IG9wdGlvbnMgPSByZXF1aXJlKCcuL29wdGlvbnMnKSxcbiAgICAgIEV4cGxvcmVyID0gcmVxdWlyZSgnLi9leHBsb3JlcicpLFxuICAgICAgUnViYmlzaEJpbiA9IHJlcXVpcmUoJy4vcnViYmlzaEJpbicpO1xuXG5jb25zdCB7IEJvZHksIFJlYWN0IH0gPSBlYXN5LFxuICAgICAgeyBOT19EUkFHR0lOR19XSVRISU4sIE5PX0RSQUdHSU5HX1NVQl9FTlRSSUVTIH0gPSBvcHRpb25zO1xuXG5jb25zdCBvcGVuSGFuZGxlciA9IChmaWxlUGF0aCkgPT4ge1xuICAgICAgYWxlcnQoZmlsZVBhdGgpXG4gICAgICB9LFxuICAgICAgbW92ZUhhbmRsZXIgPSAocGF0aE1hcHMsIGRvbmUpID0+IHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZUhhbmRsZXIgPSAocGF0aE1hcHMsIGRvbmUpID0+IHtcbiAgICAgICAgcGF0aE1hcHMuZm9yRWFjaChmdW5jdGlvbihwYXRoTWFwKSB7XG4gICAgICAgICAgY29uc3Qgc291cmNlUGF0aCA9IHBhdGhNYXBbJ3NvdXJjZVBhdGgnXTtcblxuICAgICAgICAgIHBhdGhNYXBbJ3RhcmdldFBhdGgnXSA9IHNvdXJjZVBhdGg7IC8vL1xuICAgICAgICB9KTtcblxuICAgICAgICBkb25lKCk7XG4gICAgICB9O1xuXG5jb25zdCBleHBsb3JlciA9XG5cbiAgICAgICAgPEV4cGxvcmVyIHRvcG1vc3REaXJlY3RvcnlOYW1lPVwiZXhwbG9yZXJcIiBvbk9wZW49e29wZW5IYW5kbGVyfSBvbk1vdmU9e21vdmVIYW5kbGVyfSAvPlxuXG4gICAgICAsXG4gICAgICBydWJiaXNoQmluID1cblxuICAgICAgICA8UnViYmlzaEJpbiBvblJlbW92ZT17cmVtb3ZlSGFuZGxlcn0gLz5cblxuICAgICAgO1xuXG5leHBsb3Jlci5hZGREcm9wVGFyZ2V0KHJ1YmJpc2hCaW4pO1xuXG5ydWJiaXNoQmluLmFkZERyb3BUYXJnZXQoZXhwbG9yZXIpO1xuXG5leHBsb3Jlci5hZGREaXJlY3RvcnlQYXRoKCdleHBsb3Jlci9kaXJlY3RvcnkxJyk7XG5leHBsb3Jlci5hZGREaXJlY3RvcnlQYXRoKCdleHBsb3Jlci9kaXJlY3RvcnkyJyk7XG5cbmV4cGxvcmVyLmFkZEZpbGVQYXRoKCdleHBsb3Jlci9kaXJlY3RvcnkxL2ZpbGUxLnR4dCcpO1xuZXhwbG9yZXIuYWRkRmlsZVBhdGgoJ2V4cGxvcmVyL2RpcmVjdG9yeTEvZmlsZTIudHh0Jyk7XG5leHBsb3Jlci5hZGRGaWxlUGF0aCgnZXhwbG9yZXIvZGlyZWN0b3J5Mi9maWxlMy50eHQnKTtcblxuY29uc3QgYm9keSA9IG5ldyBCb2R5KCk7XG5cbmJvZHkuYXBwZW5kKHJ1YmJpc2hCaW4pO1xuXG5ib2R5LmFwcGVuZCg8YnIgLz4pO1xuXG5ib2R5LmFwcGVuZChleHBsb3Jlcik7XG5cbi8qXG5jb25zdCBvcGVuSGFuZGxlciA9IChmaWxlUGF0aCkgPT4ge1xuICAgICAgICBhbGVydChmaWxlUGF0aClcbiAgICAgIH0sXG4gICAgICBtb3ZlSGFuZGxlciA9IChwYXRoTWFwcywgZG9uZSkgPT4ge1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlSGFuZGxlciA9IChwYXRoTWFwcywgZG9uZSkgPT4ge1xuICAgICAgICBkb25lKCk7XG4gICAgICB9O1xuXG5jb25zdCBib2R5ID0gbmV3IEJvZHkoKSxcbiAgICAgIGV4cGxvcmVyMSA9XG5cbiAgICAgICAgPEV4cGxvcmVyIHRvcG1vc3REaXJlY3RvcnlOYW1lPVwiZXhwbG9yZXIxXCIgb25PcGVuPXtvcGVuSGFuZGxlcn0gb25Nb3ZlPXttb3ZlSGFuZGxlcn0gb3B0aW9ucz17eyBOT19EUkFHR0lOR19XSVRISU4gfX0gLz5cblxuICAgICAgLFxuICAgICAgZXhwbG9yZXIyID1cblxuICAgICAgICA8RXhwbG9yZXIgdG9wbW9zdERpcmVjdG9yeU5hbWU9XCJleHBsb3JlcjJcIiBvbk9wZW49e29wZW5IYW5kbGVyfSBvbk1vdmU9e21vdmVIYW5kbGVyfSBvcHRpb25zPXt7IE5PX0RSQUdHSU5HX1NVQl9FTlRSSUVTIH19IC8+XG5cbiAgICAgICxcbiAgICAgIHJ1YmJpc2hCaW4gPVxuXG4gICAgICAgIDxSdWJiaXNoQmluIG9uUmVtb3ZlPXtyZW1vdmVIYW5kbGVyfSAvPlxuXG4gICAgICA7XG5cbmJvZHkuYXBwZW5kKHJ1YmJpc2hCaW4pO1xuXG5ib2R5LmFwcGVuZCg8YnIgLz4pO1xuXG5ib2R5LmFwcGVuZChleHBsb3JlcjEpO1xuXG5ib2R5LmFwcGVuZCg8YnIgLz4pO1xuXG5ib2R5LmFwcGVuZChleHBsb3JlcjIpO1xuXG5leHBsb3JlcjEuYWRkRHJvcFRhcmdldChydWJiaXNoQmluKTtcblxuZXhwbG9yZXIxLmFkZERyb3BUYXJnZXQoZXhwbG9yZXIyKTtcblxuZXhwbG9yZXIyLmFkZERyb3BUYXJnZXQocnViYmlzaEJpbik7XG5cbmV4cGxvcmVyMi5hZGREcm9wVGFyZ2V0KGV4cGxvcmVyMSk7XG5cbnJ1YmJpc2hCaW4uYWRkRHJvcFRhcmdldChleHBsb3JlcjEpO1xuXG5ydWJiaXNoQmluLmFkZERyb3BUYXJnZXQoZXhwbG9yZXIyKTtcblxuZXhwbG9yZXIxLmFkZEZpbGVQYXRoKCdleHBsb3JlcjEvZmlsZTEudHh0Jyk7XG5leHBsb3JlcjEuYWRkRmlsZVBhdGgoJ2V4cGxvcmVyMS9kaXJlY3RvcnkxL2ZpbGUyLnR4dCcpO1xuZXhwbG9yZXIyLmFkZEZpbGVQYXRoKCdleHBsb3JlcjIvZGlyZWN0b3J5Mi9maWxlMy50eHQnKTtcbiovIl19