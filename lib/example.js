'use strict';

var easy = require('easy');

var options = require('./options'),
    Explorer = require('./explorer'),
    RubbishBin = require('./rubbishBin');

var Body = easy.Body,
    React = easy.React,
    NO_DRAGGING_WITHIN = options.NO_DRAGGING_WITHIN,
    NO_DRAGGING_SUB_ENTRIES = options.NO_DRAGGING_SUB_ENTRIES;


var openHandler = function openHandler(filePath) {
  alert(filePath);
},
    moveHandler = function moveHandler(pathMaps, done) {
  done();
},
    removeHandler = function removeHandler(pathMaps, done) {
  pathMaps.forEach(function (pathMap) {
    var sourcePath = pathMap['sourcePath'];

    pathMap['targetPath'] = sourcePath; ///
  });

  done();
};

var body = new Body(),
    explorer1 = React.createElement(Explorer, { topmostDirectoryName: 'induction', onOpen: openHandler, onMove: moveHandler }),
    explorer2 = React.createElement(Explorer, { topmostDirectoryName: 'a132D3dx', onOpen: openHandler, onMove: moveHandler, options: { NO_DRAGGING_WITHIN: NO_DRAGGING_WITHIN } }),
    rubbishBin = React.createElement(RubbishBin, { onRemove: removeHandler });

body.append(rubbishBin);

body.append(React.createElement('br', null));

body.append(explorer1);

body.append(React.createElement('br', null));

body.append(explorer2);

explorer1.addDropTarget(rubbishBin);

explorer1.addDropTarget(explorer2);

explorer2.addDropTarget(rubbishBin);

explorer2.addDropTarget(explorer1);

rubbishBin.addDropTarget(explorer1);

rubbishBin.addDropTarget(explorer2);

explorer1.addFilePath('induction/meta.json');

explorer2.addDirectoryPath('a132D3dx');

explorer2.addDirectoryPath('a132D3dx/logic');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9leGFtcGxlLmpzIl0sIm5hbWVzIjpbImVhc3kiLCJyZXF1aXJlIiwib3B0aW9ucyIsIkV4cGxvcmVyIiwiUnViYmlzaEJpbiIsIkJvZHkiLCJSZWFjdCIsIk5PX0RSQUdHSU5HX1dJVEhJTiIsIk5PX0RSQUdHSU5HX1NVQl9FTlRSSUVTIiwib3BlbkhhbmRsZXIiLCJmaWxlUGF0aCIsImFsZXJ0IiwibW92ZUhhbmRsZXIiLCJwYXRoTWFwcyIsImRvbmUiLCJyZW1vdmVIYW5kbGVyIiwiZm9yRWFjaCIsInBhdGhNYXAiLCJzb3VyY2VQYXRoIiwiYm9keSIsImV4cGxvcmVyMSIsImV4cGxvcmVyMiIsInJ1YmJpc2hCaW4iLCJhcHBlbmQiLCJhZGREcm9wVGFyZ2V0IiwiYWRkRmlsZVBhdGgiLCJhZGREaXJlY3RvcnlQYXRoIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLE1BQVIsQ0FBYjs7QUFFQSxJQUFNQyxVQUFVRCxRQUFRLFdBQVIsQ0FBaEI7QUFBQSxJQUNNRSxXQUFXRixRQUFRLFlBQVIsQ0FEakI7QUFBQSxJQUVNRyxhQUFhSCxRQUFRLGNBQVIsQ0FGbkI7O0lBSVFJLEksR0FBZ0JMLEksQ0FBaEJLLEk7SUFBTUMsSyxHQUFVTixJLENBQVZNLEs7SUFDTkMsa0IsR0FBZ0RMLE8sQ0FBaERLLGtCO0lBQW9CQyx1QixHQUE0Qk4sTyxDQUE1Qk0sdUI7OztBQUU1QixJQUFNQyxjQUFjLFNBQWRBLFdBQWMsQ0FBQ0MsUUFBRCxFQUFjO0FBQzFCQyxRQUFNRCxRQUFOO0FBQ0QsQ0FGUDtBQUFBLElBR01FLGNBQWMsU0FBZEEsV0FBYyxDQUFDQyxRQUFELEVBQVdDLElBQVgsRUFBb0I7QUFDaENBO0FBQ0QsQ0FMUDtBQUFBLElBTU1DLGdCQUFnQixTQUFoQkEsYUFBZ0IsQ0FBQ0YsUUFBRCxFQUFXQyxJQUFYLEVBQW9CO0FBQ2xDRCxXQUFTRyxPQUFULENBQWlCLFVBQVNDLE9BQVQsRUFBa0I7QUFDakMsUUFBTUMsYUFBYUQsUUFBUSxZQUFSLENBQW5COztBQUVBQSxZQUFRLFlBQVIsSUFBd0JDLFVBQXhCLENBSGlDLENBR0c7QUFDckMsR0FKRDs7QUFNQUo7QUFDRCxDQWRQOztBQWdCQSxJQUFNSyxPQUFPLElBQUlkLElBQUosRUFBYjtBQUFBLElBQ01lLFlBRUUsb0JBQUMsUUFBRCxJQUFVLHNCQUFxQixXQUEvQixFQUEyQyxRQUFRWCxXQUFuRCxFQUFnRSxRQUFRRyxXQUF4RSxHQUhSO0FBQUEsSUFNTVMsWUFFRSxvQkFBQyxRQUFELElBQVUsc0JBQXFCLFVBQS9CLEVBQTBDLFFBQVFaLFdBQWxELEVBQStELFFBQVFHLFdBQXZFLEVBQW9GLFNBQVMsRUFBRUwsc0NBQUYsRUFBN0YsR0FSUjtBQUFBLElBV01lLGFBRUUsb0JBQUMsVUFBRCxJQUFZLFVBQVVQLGFBQXRCLEdBYlI7O0FBaUJBSSxLQUFLSSxNQUFMLENBQVlELFVBQVo7O0FBRUFILEtBQUtJLE1BQUwsQ0FBWSwrQkFBWjs7QUFFQUosS0FBS0ksTUFBTCxDQUFZSCxTQUFaOztBQUVBRCxLQUFLSSxNQUFMLENBQVksK0JBQVo7O0FBRUFKLEtBQUtJLE1BQUwsQ0FBWUYsU0FBWjs7QUFFQUQsVUFBVUksYUFBVixDQUF3QkYsVUFBeEI7O0FBRUFGLFVBQVVJLGFBQVYsQ0FBd0JILFNBQXhCOztBQUVBQSxVQUFVRyxhQUFWLENBQXdCRixVQUF4Qjs7QUFFQUQsVUFBVUcsYUFBVixDQUF3QkosU0FBeEI7O0FBRUFFLFdBQVdFLGFBQVgsQ0FBeUJKLFNBQXpCOztBQUVBRSxXQUFXRSxhQUFYLENBQXlCSCxTQUF6Qjs7QUFFQUQsVUFBVUssV0FBVixDQUFzQixxQkFBdEI7O0FBRUFKLFVBQVVLLGdCQUFWLENBQTJCLFVBQTNCOztBQUVBTCxVQUFVSyxnQkFBVixDQUEyQixnQkFBM0IiLCJmaWxlIjoiZXhhbXBsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZWFzeSA9IHJlcXVpcmUoJ2Vhc3knKTtcblxuY29uc3Qgb3B0aW9ucyA9IHJlcXVpcmUoJy4vb3B0aW9ucycpLFxuICAgICAgRXhwbG9yZXIgPSByZXF1aXJlKCcuL2V4cGxvcmVyJyksXG4gICAgICBSdWJiaXNoQmluID0gcmVxdWlyZSgnLi9ydWJiaXNoQmluJyk7XG5cbmNvbnN0IHsgQm9keSwgUmVhY3QgfSA9IGVhc3ksXG4gICAgICB7IE5PX0RSQUdHSU5HX1dJVEhJTiwgTk9fRFJBR0dJTkdfU1VCX0VOVFJJRVMgfSA9IG9wdGlvbnM7XG5cbmNvbnN0IG9wZW5IYW5kbGVyID0gKGZpbGVQYXRoKSA9PiB7XG4gICAgICAgIGFsZXJ0KGZpbGVQYXRoKVxuICAgICAgfSxcbiAgICAgIG1vdmVIYW5kbGVyID0gKHBhdGhNYXBzLCBkb25lKSA9PiB7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVIYW5kbGVyID0gKHBhdGhNYXBzLCBkb25lKSA9PiB7XG4gICAgICAgIHBhdGhNYXBzLmZvckVhY2goZnVuY3Rpb24ocGF0aE1hcCkge1xuICAgICAgICAgIGNvbnN0IHNvdXJjZVBhdGggPSBwYXRoTWFwWydzb3VyY2VQYXRoJ107XG5cbiAgICAgICAgICBwYXRoTWFwWyd0YXJnZXRQYXRoJ10gPSBzb3VyY2VQYXRoOyAvLy9cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9uZSgpO1xuICAgICAgfTtcblxuY29uc3QgYm9keSA9IG5ldyBCb2R5KCksXG4gICAgICBleHBsb3JlcjEgPVxuXG4gICAgICAgIDxFeHBsb3JlciB0b3Btb3N0RGlyZWN0b3J5TmFtZT1cImluZHVjdGlvblwiIG9uT3Blbj17b3BlbkhhbmRsZXJ9IG9uTW92ZT17bW92ZUhhbmRsZXJ9IC8+XG5cbiAgICAgICxcbiAgICAgIGV4cGxvcmVyMiA9XG5cbiAgICAgICAgPEV4cGxvcmVyIHRvcG1vc3REaXJlY3RvcnlOYW1lPVwiYTEzMkQzZHhcIiBvbk9wZW49e29wZW5IYW5kbGVyfSBvbk1vdmU9e21vdmVIYW5kbGVyfSBvcHRpb25zPXt7IE5PX0RSQUdHSU5HX1dJVEhJTiB9fSAvPlxuXG4gICAgICAsXG4gICAgICBydWJiaXNoQmluID1cblxuICAgICAgICA8UnViYmlzaEJpbiBvblJlbW92ZT17cmVtb3ZlSGFuZGxlcn0gLz5cblxuICAgICAgO1xuXG5ib2R5LmFwcGVuZChydWJiaXNoQmluKTtcblxuYm9keS5hcHBlbmQoPGJyIC8+KTtcblxuYm9keS5hcHBlbmQoZXhwbG9yZXIxKTtcblxuYm9keS5hcHBlbmQoPGJyIC8+KTtcblxuYm9keS5hcHBlbmQoZXhwbG9yZXIyKTtcblxuZXhwbG9yZXIxLmFkZERyb3BUYXJnZXQocnViYmlzaEJpbik7XG5cbmV4cGxvcmVyMS5hZGREcm9wVGFyZ2V0KGV4cGxvcmVyMik7XG5cbmV4cGxvcmVyMi5hZGREcm9wVGFyZ2V0KHJ1YmJpc2hCaW4pO1xuXG5leHBsb3JlcjIuYWRkRHJvcFRhcmdldChleHBsb3JlcjEpO1xuXG5ydWJiaXNoQmluLmFkZERyb3BUYXJnZXQoZXhwbG9yZXIxKTtcblxucnViYmlzaEJpbi5hZGREcm9wVGFyZ2V0KGV4cGxvcmVyMik7XG5cbmV4cGxvcmVyMS5hZGRGaWxlUGF0aCgnaW5kdWN0aW9uL21ldGEuanNvbicpO1xuXG5leHBsb3JlcjIuYWRkRGlyZWN0b3J5UGF0aCgnYTEzMkQzZHgnKTtcblxuZXhwbG9yZXIyLmFkZERpcmVjdG9yeVBhdGgoJ2ExMzJEM2R4L2xvZ2ljJyk7XG4iXX0=