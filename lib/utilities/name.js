"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.extensionFromName = extensionFromName;
exports.nameWithoutExtensionFromName = nameWithoutExtensionFromName;
exports.nameIsBeforeEntryName = nameIsBeforeEntryName;
var _necessary = require("necessary");
var second = _necessary.arrayUtilities.second;
function extensionFromName(name) {
    var extension = null;
    var matches = name.match(/^.*\.([^.]+)$/);
    if (matches !== null) {
        var secondMatch = second(matches);
        extension = secondMatch; ///
    }
    return extension;
}
function nameWithoutExtensionFromName(name) {
    var nameWithoutExtension = null;
    var matches = name.match(/^(.+)\.[^.]+$/);
    if (matches !== null) {
        var secondMatch = second(matches);
        nameWithoutExtension = secondMatch; ///
    }
    return nameWithoutExtension;
}
function nameIsBeforeEntryName(name, entryName) {
    var before = name.localeCompare(entryName) < 0;
    var nameExtension = extensionFromName(name), entryNameExtension = extensionFromName(entryName), nameWithoutExtension = nameWithoutExtensionFromName(name), entryNameWithoutExtension = nameWithoutExtensionFromName(entryName), nameExtensionPresent = nameExtension !== null, entryNameExtensionPresent = entryNameExtension !== null, nameWithoutExtensionMissing = nameWithoutExtension === null, entryNameWithoutExtensionMissing = entryNameWithoutExtension === null, extensionsBothPresent = nameExtensionPresent && entryNameExtensionPresent, namesWithoutExtensionsBothMissing = nameWithoutExtensionMissing && entryNameWithoutExtensionMissing;
    if (namesWithoutExtensionsBothMissing) {
    ///
    } else if (nameWithoutExtensionMissing) {
        before = true;
    } else if (entryNameWithoutExtensionMissing) {
        before = false;
    } else {
        if (extensionsBothPresent) {
            var extensionsDiffer = nameExtension !== entryNameExtension;
            if (extensionsDiffer) {
                before = nameExtension.localeCompare(entryNameExtension) < 0;
            }
        } else if (nameExtensionPresent) {
            before = false;
        } else if (entryNameExtensionPresent) {
            before = true;
        }
    }
    return before;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbmFtZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgc2Vjb25kIH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuc2lvbkZyb21OYW1lKG5hbWUpIHtcbiAgbGV0IGV4dGVuc2lvbiA9IG51bGw7XG5cbiAgY29uc3QgbWF0Y2hlcyA9IG5hbWUubWF0Y2goL14uKlxcLihbXi5dKykkLyk7XG5cbiAgaWYgKG1hdGNoZXMgIT09IG51bGwpIHtcbiAgICBjb25zdCBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKTtcblxuICAgIGV4dGVuc2lvbiA9IHNlY29uZE1hdGNoOyAgLy8vXG4gIH1cblxuICByZXR1cm4gZXh0ZW5zaW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmFtZVdpdGhvdXRFeHRlbnNpb25Gcm9tTmFtZShuYW1lKSB7XG4gIGxldCBuYW1lV2l0aG91dEV4dGVuc2lvbiA9IG51bGw7XG5cbiAgY29uc3QgbWF0Y2hlcyA9IG5hbWUubWF0Y2goL14oLispXFwuW14uXSskLyk7XG5cbiAgaWYgKG1hdGNoZXMgIT09IG51bGwpIHtcbiAgICBjb25zdCBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKTtcblxuICAgIG5hbWVXaXRob3V0RXh0ZW5zaW9uID0gc2Vjb25kTWF0Y2g7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBuYW1lV2l0aG91dEV4dGVuc2lvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5hbWVJc0JlZm9yZUVudHJ5TmFtZShuYW1lLCBlbnRyeU5hbWUpIHtcbiAgbGV0IGJlZm9yZSA9IChuYW1lLmxvY2FsZUNvbXBhcmUoZW50cnlOYW1lKSA8IDApO1xuXG4gIGNvbnN0IG5hbWVFeHRlbnNpb24gPSBleHRlbnNpb25Gcm9tTmFtZShuYW1lKSxcbiAgICAgICAgZW50cnlOYW1lRXh0ZW5zaW9uID0gZXh0ZW5zaW9uRnJvbU5hbWUoZW50cnlOYW1lKSxcbiAgICAgICAgbmFtZVdpdGhvdXRFeHRlbnNpb24gPSBuYW1lV2l0aG91dEV4dGVuc2lvbkZyb21OYW1lKG5hbWUpLFxuICAgICAgICBlbnRyeU5hbWVXaXRob3V0RXh0ZW5zaW9uID0gbmFtZVdpdGhvdXRFeHRlbnNpb25Gcm9tTmFtZShlbnRyeU5hbWUpLFxuICAgICAgICBuYW1lRXh0ZW5zaW9uUHJlc2VudCA9IChuYW1lRXh0ZW5zaW9uICE9PSBudWxsKSxcbiAgICAgICAgZW50cnlOYW1lRXh0ZW5zaW9uUHJlc2VudCA9IChlbnRyeU5hbWVFeHRlbnNpb24gIT09IG51bGwpLFxuICAgICAgICBuYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmcgPSAobmFtZVdpdGhvdXRFeHRlbnNpb24gPT09IG51bGwpLFxuICAgICAgICBlbnRyeU5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZyA9IChlbnRyeU5hbWVXaXRob3V0RXh0ZW5zaW9uID09PSBudWxsKSxcbiAgICAgICAgZXh0ZW5zaW9uc0JvdGhQcmVzZW50ID0gKG5hbWVFeHRlbnNpb25QcmVzZW50ICYmIGVudHJ5TmFtZUV4dGVuc2lvblByZXNlbnQpLFxuICAgICAgICBuYW1lc1dpdGhvdXRFeHRlbnNpb25zQm90aE1pc3NpbmcgPSAobmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nICYmIGVudHJ5TmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nKTtcblxuICBpZiAobmFtZXNXaXRob3V0RXh0ZW5zaW9uc0JvdGhNaXNzaW5nKSB7XG4gICAgLy8vXG4gIH0gZWxzZSBpZiAobmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nKSB7XG4gICAgYmVmb3JlID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChlbnRyeU5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZykge1xuICAgIGJlZm9yZSA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIGlmIChleHRlbnNpb25zQm90aFByZXNlbnQpIHtcbiAgICAgIGNvbnN0IGV4dGVuc2lvbnNEaWZmZXIgPSAobmFtZUV4dGVuc2lvbiAhPT0gZW50cnlOYW1lRXh0ZW5zaW9uKTtcblxuICAgICAgaWYgKGV4dGVuc2lvbnNEaWZmZXIpIHtcbiAgICAgICAgYmVmb3JlID0gKG5hbWVFeHRlbnNpb24ubG9jYWxlQ29tcGFyZShlbnRyeU5hbWVFeHRlbnNpb24pIDwgMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuYW1lRXh0ZW5zaW9uUHJlc2VudCkge1xuICAgICAgYmVmb3JlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChlbnRyeU5hbWVFeHRlbnNpb25QcmVzZW50KSB7XG4gICAgICBiZWZvcmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBiZWZvcmU7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7OztRQU1JLGlCQUFpQixHQUFqQixpQkFBaUI7UUFjakIsNEJBQTRCLEdBQTVCLDRCQUE0QjtRQWM1QixxQkFBcUIsR0FBckIscUJBQXFCO0lBaENOLFVBQVc7SUFFbEMsTUFBTSxHQUZpQixVQUFXLGdCQUVsQyxNQUFNO1NBRUUsaUJBQWlCLENBQUMsSUFBSTtRQUNoQyxTQUFTLEdBQUcsSUFBSTtRQUVkLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSztRQUV0QixPQUFPLEtBQUssSUFBSTtZQUNaLFdBQVcsR0FBRyxNQUFNLENBQUMsT0FBTztRQUVsQyxTQUFTLEdBQUcsV0FBVyxDQUFHLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRzs7V0FHeEIsU0FBUzs7U0FHRiw0QkFBNEIsQ0FBQyxJQUFJO1FBQzNDLG9CQUFvQixHQUFHLElBQUk7UUFFekIsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLO1FBRXRCLE9BQU8sS0FBSyxJQUFJO1lBQ1osV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPO1FBRWxDLG9CQUFvQixHQUFHLFdBQVcsQ0FBRyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7O1dBR25DLG9CQUFvQjs7U0FHYixxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsU0FBUztRQUMvQyxNQUFNLEdBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLElBQUksQ0FBQztRQUV6QyxhQUFhLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxHQUN0QyxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQyxTQUFTLEdBQ2hELG9CQUFvQixHQUFHLDRCQUE0QixDQUFDLElBQUksR0FDeEQseUJBQXlCLEdBQUcsNEJBQTRCLENBQUMsU0FBUyxHQUNsRSxvQkFBb0IsR0FBSSxhQUFhLEtBQUssSUFBSSxFQUM5Qyx5QkFBeUIsR0FBSSxrQkFBa0IsS0FBSyxJQUFJLEVBQ3hELDJCQUEyQixHQUFJLG9CQUFvQixLQUFLLElBQUksRUFDNUQsZ0NBQWdDLEdBQUkseUJBQXlCLEtBQUssSUFBSSxFQUN0RSxxQkFBcUIsR0FBSSxvQkFBb0IsSUFBSSx5QkFBeUIsRUFDMUUsaUNBQWlDLEdBQUksMkJBQTJCLElBQUksZ0NBQWdDO1FBRXRHLGlDQUFpQztJQUNuQyxFQUFHLEFBQUgsQ0FBRztlQUNNLDJCQUEyQjtRQUNwQyxNQUFNLEdBQUcsSUFBSTtlQUNKLGdDQUFnQztRQUN6QyxNQUFNLEdBQUcsS0FBSzs7WUFFVixxQkFBcUI7Z0JBQ2pCLGdCQUFnQixHQUFJLGFBQWEsS0FBSyxrQkFBa0I7Z0JBRTFELGdCQUFnQjtnQkFDbEIsTUFBTSxHQUFJLGFBQWEsQ0FBQyxhQUFhLENBQUMsa0JBQWtCLElBQUksQ0FBQzs7bUJBRXRELG9CQUFvQjtZQUM3QixNQUFNLEdBQUcsS0FBSzttQkFDTCx5QkFBeUI7WUFDbEMsTUFBTSxHQUFHLElBQUk7OztXQUlWLE1BQU0ifQ==