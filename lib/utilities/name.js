"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extensionFromName = extensionFromName;
exports.nameWithoutExtensionFromName = nameWithoutExtensionFromName;
exports.nameIsBeforeEntryName = nameIsBeforeEntryName;

var _necessary = require("necessary");

var second = _necessary.arrayUtilities.second;

function extensionFromName(name) {
  var extension = null;
  var matches = name.match(/^.*\.([^.]+)$/);

  if (matches !== null) {
    var secondMatch = second(matches);
    extension = secondMatch; ///
  }

  return extension;
}

function nameWithoutExtensionFromName(name) {
  var nameWithoutExtension = null;
  var matches = name.match(/^(.+)\.[^.]+$/);

  if (matches !== null) {
    var secondMatch = second(matches);
    nameWithoutExtension = secondMatch; ///
  }

  return nameWithoutExtension;
}

function nameIsBeforeEntryName(name, entryName) {
  var before = name.localeCompare(entryName) < 0;
  var nameExtension = extensionFromName(name),
      entryNameExtension = extensionFromName(entryName),
      nameWithoutExtension = nameWithoutExtensionFromName(name),
      entryNameWithoutExtension = nameWithoutExtensionFromName(entryName),
      nameExtensionPresent = nameExtension !== null,
      entryNameExtensionPresent = entryNameExtension !== null,
      nameWithoutExtensionMissing = nameWithoutExtension === null,
      entryNameWithoutExtensionMissing = entryNameWithoutExtension === null,
      extensionsBothPresent = nameExtensionPresent && entryNameExtensionPresent,
      namesWithoutExtensionsBothMissing = nameWithoutExtensionMissing && entryNameWithoutExtensionMissing;

  if (namesWithoutExtensionsBothMissing) {///
  } else if (nameWithoutExtensionMissing) {
    before = true;
  } else if (entryNameWithoutExtensionMissing) {
    before = false;
  } else {
    if (extensionsBothPresent) {
      var extensionsDiffer = nameExtension !== entryNameExtension;

      if (extensionsDiffer) {
        before = nameExtension.localeCompare(entryNameExtension) < 0;
      }
    } else if (nameExtensionPresent) {
      before = false;
    } else if (entryNameExtensionPresent) {
      before = true;
    }
  }

  return before;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hbWUuanMiXSwibmFtZXMiOlsic2Vjb25kIiwiYXJyYXlVdGlsaXRpZXMiLCJleHRlbnNpb25Gcm9tTmFtZSIsIm5hbWUiLCJleHRlbnNpb24iLCJtYXRjaGVzIiwibWF0Y2giLCJzZWNvbmRNYXRjaCIsIm5hbWVXaXRob3V0RXh0ZW5zaW9uRnJvbU5hbWUiLCJuYW1lV2l0aG91dEV4dGVuc2lvbiIsIm5hbWVJc0JlZm9yZUVudHJ5TmFtZSIsImVudHJ5TmFtZSIsImJlZm9yZSIsImxvY2FsZUNvbXBhcmUiLCJuYW1lRXh0ZW5zaW9uIiwiZW50cnlOYW1lRXh0ZW5zaW9uIiwiZW50cnlOYW1lV2l0aG91dEV4dGVuc2lvbiIsIm5hbWVFeHRlbnNpb25QcmVzZW50IiwiZW50cnlOYW1lRXh0ZW5zaW9uUHJlc2VudCIsIm5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZyIsImVudHJ5TmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nIiwiZXh0ZW5zaW9uc0JvdGhQcmVzZW50IiwibmFtZXNXaXRob3V0RXh0ZW5zaW9uc0JvdGhNaXNzaW5nIiwiZXh0ZW5zaW9uc0RpZmZlciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQUVBOztJQUVRQSxNLEdBQVdDLHlCLENBQVhELE07O0FBRUQsU0FBU0UsaUJBQVQsQ0FBMkJDLElBQTNCLEVBQWlDO0FBQ3RDLE1BQUlDLFNBQVMsR0FBRyxJQUFoQjtBQUVBLE1BQU1DLE9BQU8sR0FBR0YsSUFBSSxDQUFDRyxLQUFMLENBQVcsZUFBWCxDQUFoQjs7QUFFQSxNQUFJRCxPQUFPLEtBQUssSUFBaEIsRUFBc0I7QUFDcEIsUUFBTUUsV0FBVyxHQUFHUCxNQUFNLENBQUNLLE9BQUQsQ0FBMUI7QUFFQUQsSUFBQUEsU0FBUyxHQUFHRyxXQUFaLENBSG9CLENBR007QUFDM0I7O0FBRUQsU0FBT0gsU0FBUDtBQUNEOztBQUVNLFNBQVNJLDRCQUFULENBQXNDTCxJQUF0QyxFQUE0QztBQUNqRCxNQUFJTSxvQkFBb0IsR0FBRyxJQUEzQjtBQUVBLE1BQU1KLE9BQU8sR0FBR0YsSUFBSSxDQUFDRyxLQUFMLENBQVcsZUFBWCxDQUFoQjs7QUFFQSxNQUFJRCxPQUFPLEtBQUssSUFBaEIsRUFBc0I7QUFDcEIsUUFBTUUsV0FBVyxHQUFHUCxNQUFNLENBQUNLLE9BQUQsQ0FBMUI7QUFFQUksSUFBQUEsb0JBQW9CLEdBQUdGLFdBQXZCLENBSG9CLENBR2lCO0FBQ3RDOztBQUVELFNBQU9FLG9CQUFQO0FBQ0Q7O0FBRU0sU0FBU0MscUJBQVQsQ0FBK0JQLElBQS9CLEVBQXFDUSxTQUFyQyxFQUFnRDtBQUNyRCxNQUFJQyxNQUFNLEdBQUlULElBQUksQ0FBQ1UsYUFBTCxDQUFtQkYsU0FBbkIsSUFBZ0MsQ0FBOUM7QUFFQSxNQUFNRyxhQUFhLEdBQUdaLGlCQUFpQixDQUFDQyxJQUFELENBQXZDO0FBQUEsTUFDTVksa0JBQWtCLEdBQUdiLGlCQUFpQixDQUFDUyxTQUFELENBRDVDO0FBQUEsTUFFTUYsb0JBQW9CLEdBQUdELDRCQUE0QixDQUFDTCxJQUFELENBRnpEO0FBQUEsTUFHTWEseUJBQXlCLEdBQUdSLDRCQUE0QixDQUFDRyxTQUFELENBSDlEO0FBQUEsTUFJTU0sb0JBQW9CLEdBQUlILGFBQWEsS0FBSyxJQUpoRDtBQUFBLE1BS01JLHlCQUF5QixHQUFJSCxrQkFBa0IsS0FBSyxJQUwxRDtBQUFBLE1BTU1JLDJCQUEyQixHQUFJVixvQkFBb0IsS0FBSyxJQU45RDtBQUFBLE1BT01XLGdDQUFnQyxHQUFJSix5QkFBeUIsS0FBSyxJQVB4RTtBQUFBLE1BUU1LLHFCQUFxQixHQUFJSixvQkFBb0IsSUFBSUMseUJBUnZEO0FBQUEsTUFTTUksaUNBQWlDLEdBQUlILDJCQUEyQixJQUFJQyxnQ0FUMUU7O0FBV0EsTUFBSUUsaUNBQUosRUFBdUMsQ0FDckM7QUFDRCxHQUZELE1BRU8sSUFBSUgsMkJBQUosRUFBaUM7QUFDdENQLElBQUFBLE1BQU0sR0FBRyxJQUFUO0FBQ0QsR0FGTSxNQUVBLElBQUlRLGdDQUFKLEVBQXNDO0FBQzNDUixJQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNELEdBRk0sTUFFQTtBQUNMLFFBQUlTLHFCQUFKLEVBQTJCO0FBQ3pCLFVBQU1FLGdCQUFnQixHQUFJVCxhQUFhLEtBQUtDLGtCQUE1Qzs7QUFFQSxVQUFJUSxnQkFBSixFQUFzQjtBQUNwQlgsUUFBQUEsTUFBTSxHQUFJRSxhQUFhLENBQUNELGFBQWQsQ0FBNEJFLGtCQUE1QixJQUFrRCxDQUE1RDtBQUNEO0FBQ0YsS0FORCxNQU1PLElBQUlFLG9CQUFKLEVBQTBCO0FBQy9CTCxNQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNELEtBRk0sTUFFQSxJQUFJTSx5QkFBSixFQUErQjtBQUNwQ04sTUFBQUEsTUFBTSxHQUFHLElBQVQ7QUFDRDtBQUNGOztBQUVELFNBQU9BLE1BQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuY29uc3QgeyBzZWNvbmQgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5zaW9uRnJvbU5hbWUobmFtZSkge1xuICBsZXQgZXh0ZW5zaW9uID0gbnVsbDtcblxuICBjb25zdCBtYXRjaGVzID0gbmFtZS5tYXRjaCgvXi4qXFwuKFteLl0rKSQvKTtcblxuICBpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHNlY29uZE1hdGNoID0gc2Vjb25kKG1hdGNoZXMpO1xuXG4gICAgZXh0ZW5zaW9uID0gc2Vjb25kTWF0Y2g7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBleHRlbnNpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuYW1lV2l0aG91dEV4dGVuc2lvbkZyb21OYW1lKG5hbWUpIHtcbiAgbGV0IG5hbWVXaXRob3V0RXh0ZW5zaW9uID0gbnVsbDtcblxuICBjb25zdCBtYXRjaGVzID0gbmFtZS5tYXRjaCgvXiguKylcXC5bXi5dKyQvKTtcblxuICBpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHNlY29uZE1hdGNoID0gc2Vjb25kKG1hdGNoZXMpO1xuXG4gICAgbmFtZVdpdGhvdXRFeHRlbnNpb24gPSBzZWNvbmRNYXRjaDsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIG5hbWVXaXRob3V0RXh0ZW5zaW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmFtZUlzQmVmb3JlRW50cnlOYW1lKG5hbWUsIGVudHJ5TmFtZSkge1xuICBsZXQgYmVmb3JlID0gKG5hbWUubG9jYWxlQ29tcGFyZShlbnRyeU5hbWUpIDwgMCk7XG5cbiAgY29uc3QgbmFtZUV4dGVuc2lvbiA9IGV4dGVuc2lvbkZyb21OYW1lKG5hbWUpLFxuICAgICAgICBlbnRyeU5hbWVFeHRlbnNpb24gPSBleHRlbnNpb25Gcm9tTmFtZShlbnRyeU5hbWUpLFxuICAgICAgICBuYW1lV2l0aG91dEV4dGVuc2lvbiA9IG5hbWVXaXRob3V0RXh0ZW5zaW9uRnJvbU5hbWUobmFtZSksXG4gICAgICAgIGVudHJ5TmFtZVdpdGhvdXRFeHRlbnNpb24gPSBuYW1lV2l0aG91dEV4dGVuc2lvbkZyb21OYW1lKGVudHJ5TmFtZSksXG4gICAgICAgIG5hbWVFeHRlbnNpb25QcmVzZW50ID0gKG5hbWVFeHRlbnNpb24gIT09IG51bGwpLFxuICAgICAgICBlbnRyeU5hbWVFeHRlbnNpb25QcmVzZW50ID0gKGVudHJ5TmFtZUV4dGVuc2lvbiAhPT0gbnVsbCksXG4gICAgICAgIG5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZyA9IChuYW1lV2l0aG91dEV4dGVuc2lvbiA9PT0gbnVsbCksXG4gICAgICAgIGVudHJ5TmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nID0gKGVudHJ5TmFtZVdpdGhvdXRFeHRlbnNpb24gPT09IG51bGwpLFxuICAgICAgICBleHRlbnNpb25zQm90aFByZXNlbnQgPSAobmFtZUV4dGVuc2lvblByZXNlbnQgJiYgZW50cnlOYW1lRXh0ZW5zaW9uUHJlc2VudCksXG4gICAgICAgIG5hbWVzV2l0aG91dEV4dGVuc2lvbnNCb3RoTWlzc2luZyA9IChuYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmcgJiYgZW50cnlOYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmcpO1xuXG4gIGlmIChuYW1lc1dpdGhvdXRFeHRlbnNpb25zQm90aE1pc3NpbmcpIHtcbiAgICAvLy9cbiAgfSBlbHNlIGlmIChuYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmcpIHtcbiAgICBiZWZvcmUgPSB0cnVlO1xuICB9IGVsc2UgaWYgKGVudHJ5TmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nKSB7XG4gICAgYmVmb3JlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGV4dGVuc2lvbnNCb3RoUHJlc2VudCkge1xuICAgICAgY29uc3QgZXh0ZW5zaW9uc0RpZmZlciA9IChuYW1lRXh0ZW5zaW9uICE9PSBlbnRyeU5hbWVFeHRlbnNpb24pO1xuXG4gICAgICBpZiAoZXh0ZW5zaW9uc0RpZmZlcikge1xuICAgICAgICBiZWZvcmUgPSAobmFtZUV4dGVuc2lvbi5sb2NhbGVDb21wYXJlKGVudHJ5TmFtZUV4dGVuc2lvbikgPCAwKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5hbWVFeHRlbnNpb25QcmVzZW50KSB7XG4gICAgICBiZWZvcmUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGVudHJ5TmFtZUV4dGVuc2lvblByZXNlbnQpIHtcbiAgICAgIGJlZm9yZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJlZm9yZTtcbn1cbiJdfQ==