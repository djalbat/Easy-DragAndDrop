"use strict";

var necessary = require("necessary");

var arrayUtilities = necessary.arrayUtilities,
    second = arrayUtilities.second;

function extensionFromName(name) {
  var extension = null;
  var matches = name.match(/^.*\.([^.]+)$/);

  if (matches !== null) {
    var secondMatch = second(matches);
    extension = secondMatch; ///
  }

  return extension;
}

function nameWithoutExtensionFromName(name) {
  var nameWithoutExtension = null;
  var matches = name.match(/^(.+)\.[^.]+$/);

  if (matches !== null) {
    var secondMatch = second(matches);
    nameWithoutExtension = secondMatch; ///
  }

  return nameWithoutExtension;
}

function nameIsBeforeEntryName(name, entryName) {
  var before = name.localeCompare(entryName) < 0;
  var nameExtension = extensionFromName(name),
      entryNameExtension = extensionFromName(entryName),
      nameWithoutExtension = nameWithoutExtensionFromName(name),
      entryNameWithoutExtension = nameWithoutExtensionFromName(entryName),
      nameExtensionPresent = nameExtension !== null,
      entryNameExtensionPresent = entryNameExtension !== null,
      nameWithoutExtensionMissing = nameWithoutExtension === null,
      entryNameWithoutExtensionMissing = entryNameWithoutExtension === null,
      extensionsBothPresent = nameExtensionPresent && entryNameExtensionPresent,
      namesWithoutExtensionsBothMissing = nameWithoutExtensionMissing && entryNameWithoutExtensionMissing;

  if (namesWithoutExtensionsBothMissing) {///
  } else if (nameWithoutExtensionMissing) {
    before = true;
  } else if (entryNameWithoutExtensionMissing) {
    before = false;
  } else {
    if (extensionsBothPresent) {
      var extensionsDiffer = nameExtension !== entryNameExtension;

      if (extensionsDiffer) {
        before = nameExtension.localeCompare(entryNameExtension) < 0;
      }
    } else if (nameExtensionPresent) {
      before = false;
    } else if (entryNameExtensionPresent) {
      before = true;
    }
  }

  return before;
}

module.exports = {
  extensionFromName: extensionFromName,
  nameWithoutExtensionFromName: nameWithoutExtensionFromName,
  nameIsBeforeEntryName: nameIsBeforeEntryName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hbWUuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwic2Vjb25kIiwiZXh0ZW5zaW9uRnJvbU5hbWUiLCJuYW1lIiwiZXh0ZW5zaW9uIiwibWF0Y2hlcyIsIm1hdGNoIiwic2Vjb25kTWF0Y2giLCJuYW1lV2l0aG91dEV4dGVuc2lvbkZyb21OYW1lIiwibmFtZVdpdGhvdXRFeHRlbnNpb24iLCJuYW1lSXNCZWZvcmVFbnRyeU5hbWUiLCJlbnRyeU5hbWUiLCJiZWZvcmUiLCJsb2NhbGVDb21wYXJlIiwibmFtZUV4dGVuc2lvbiIsImVudHJ5TmFtZUV4dGVuc2lvbiIsImVudHJ5TmFtZVdpdGhvdXRFeHRlbnNpb24iLCJuYW1lRXh0ZW5zaW9uUHJlc2VudCIsImVudHJ5TmFtZUV4dGVuc2lvblByZXNlbnQiLCJuYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmciLCJlbnRyeU5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZyIsImV4dGVuc2lvbnNCb3RoUHJlc2VudCIsIm5hbWVzV2l0aG91dEV4dGVuc2lvbnNCb3RoTWlzc2luZyIsImV4dGVuc2lvbnNEaWZmZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUVNLElBQUVDLGNBQUYsR0FBcUJGLFNBQXJCLENBQUVFLGNBQUY7QUFBQSxJQUNFQyxNQURGLEdBQ2FELGNBRGIsQ0FDRUMsTUFERjs7QUFHTixTQUFTQyxpQkFBVCxDQUEyQkMsSUFBM0IsRUFBaUM7QUFDL0IsTUFBSUMsU0FBUyxHQUFHLElBQWhCO0FBRUEsTUFBTUMsT0FBTyxHQUFHRixJQUFJLENBQUNHLEtBQUwsQ0FBVyxlQUFYLENBQWhCOztBQUVBLE1BQUlELE9BQU8sS0FBSyxJQUFoQixFQUFzQjtBQUNwQixRQUFNRSxXQUFXLEdBQUdOLE1BQU0sQ0FBQ0ksT0FBRCxDQUExQjtBQUVBRCxJQUFBQSxTQUFTLEdBQUdHLFdBQVosQ0FIb0IsQ0FHTTtBQUMzQjs7QUFFRCxTQUFPSCxTQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksNEJBQVQsQ0FBc0NMLElBQXRDLEVBQTRDO0FBQzFDLE1BQUlNLG9CQUFvQixHQUFHLElBQTNCO0FBRUEsTUFBTUosT0FBTyxHQUFHRixJQUFJLENBQUNHLEtBQUwsQ0FBVyxlQUFYLENBQWhCOztBQUVBLE1BQUlELE9BQU8sS0FBSyxJQUFoQixFQUFzQjtBQUNwQixRQUFNRSxXQUFXLEdBQUdOLE1BQU0sQ0FBQ0ksT0FBRCxDQUExQjtBQUVBSSxJQUFBQSxvQkFBb0IsR0FBR0YsV0FBdkIsQ0FIb0IsQ0FHaUI7QUFDdEM7O0FBRUQsU0FBT0Usb0JBQVA7QUFDRDs7QUFFRCxTQUFTQyxxQkFBVCxDQUErQlAsSUFBL0IsRUFBcUNRLFNBQXJDLEVBQWdEO0FBQzlDLE1BQUlDLE1BQU0sR0FBSVQsSUFBSSxDQUFDVSxhQUFMLENBQW1CRixTQUFuQixJQUFnQyxDQUE5QztBQUVBLE1BQU1HLGFBQWEsR0FBR1osaUJBQWlCLENBQUNDLElBQUQsQ0FBdkM7QUFBQSxNQUNNWSxrQkFBa0IsR0FBR2IsaUJBQWlCLENBQUNTLFNBQUQsQ0FENUM7QUFBQSxNQUVNRixvQkFBb0IsR0FBR0QsNEJBQTRCLENBQUNMLElBQUQsQ0FGekQ7QUFBQSxNQUdNYSx5QkFBeUIsR0FBR1IsNEJBQTRCLENBQUNHLFNBQUQsQ0FIOUQ7QUFBQSxNQUlNTSxvQkFBb0IsR0FBSUgsYUFBYSxLQUFLLElBSmhEO0FBQUEsTUFLTUkseUJBQXlCLEdBQUlILGtCQUFrQixLQUFLLElBTDFEO0FBQUEsTUFNTUksMkJBQTJCLEdBQUlWLG9CQUFvQixLQUFLLElBTjlEO0FBQUEsTUFPTVcsZ0NBQWdDLEdBQUlKLHlCQUF5QixLQUFLLElBUHhFO0FBQUEsTUFRTUsscUJBQXFCLEdBQUlKLG9CQUFvQixJQUFJQyx5QkFSdkQ7QUFBQSxNQVNNSSxpQ0FBaUMsR0FBSUgsMkJBQTJCLElBQUlDLGdDQVQxRTs7QUFXQSxNQUFJRSxpQ0FBSixFQUF1QyxDQUNyQztBQUNELEdBRkQsTUFFTyxJQUFJSCwyQkFBSixFQUFpQztBQUN0Q1AsSUFBQUEsTUFBTSxHQUFHLElBQVQ7QUFDRCxHQUZNLE1BRUEsSUFBSVEsZ0NBQUosRUFBc0M7QUFDM0NSLElBQUFBLE1BQU0sR0FBRyxLQUFUO0FBQ0QsR0FGTSxNQUVBO0FBQ0wsUUFBSVMscUJBQUosRUFBMkI7QUFDekIsVUFBTUUsZ0JBQWdCLEdBQUlULGFBQWEsS0FBS0Msa0JBQTVDOztBQUVBLFVBQUlRLGdCQUFKLEVBQXNCO0FBQ3BCWCxRQUFBQSxNQUFNLEdBQUlFLGFBQWEsQ0FBQ0QsYUFBZCxDQUE0QkUsa0JBQTVCLElBQWtELENBQTVEO0FBQ0Q7QUFDRixLQU5ELE1BTU8sSUFBSUUsb0JBQUosRUFBMEI7QUFDL0JMLE1BQUFBLE1BQU0sR0FBRyxLQUFUO0FBQ0QsS0FGTSxNQUVBLElBQUlNLHlCQUFKLEVBQStCO0FBQ3BDTixNQUFBQSxNQUFNLEdBQUcsSUFBVDtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0EsTUFBUDtBQUNEOztBQUVEWSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZnZCLEVBQUFBLGlCQUFpQixFQUFqQkEsaUJBRGU7QUFFZk0sRUFBQUEsNEJBQTRCLEVBQTVCQSw0QkFGZTtBQUdmRSxFQUFBQSxxQkFBcUIsRUFBckJBO0FBSGUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZShcIm5lY2Vzc2FyeVwiKTtcblxuY29uc3QgeyBhcnJheVV0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBzZWNvbmQgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBleHRlbnNpb25Gcm9tTmFtZShuYW1lKSB7XG4gIGxldCBleHRlbnNpb24gPSBudWxsO1xuXG4gIGNvbnN0IG1hdGNoZXMgPSBuYW1lLm1hdGNoKC9eLipcXC4oW14uXSspJC8pO1xuXG4gIGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc2Vjb25kTWF0Y2ggPSBzZWNvbmQobWF0Y2hlcyk7XG5cbiAgICBleHRlbnNpb24gPSBzZWNvbmRNYXRjaDsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIGV4dGVuc2lvbjtcbn1cblxuZnVuY3Rpb24gbmFtZVdpdGhvdXRFeHRlbnNpb25Gcm9tTmFtZShuYW1lKSB7XG4gIGxldCBuYW1lV2l0aG91dEV4dGVuc2lvbiA9IG51bGw7XG5cbiAgY29uc3QgbWF0Y2hlcyA9IG5hbWUubWF0Y2goL14oLispXFwuW14uXSskLyk7XG5cbiAgaWYgKG1hdGNoZXMgIT09IG51bGwpIHtcbiAgICBjb25zdCBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKTtcblxuICAgIG5hbWVXaXRob3V0RXh0ZW5zaW9uID0gc2Vjb25kTWF0Y2g7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBuYW1lV2l0aG91dEV4dGVuc2lvbjtcbn1cblxuZnVuY3Rpb24gbmFtZUlzQmVmb3JlRW50cnlOYW1lKG5hbWUsIGVudHJ5TmFtZSkge1xuICBsZXQgYmVmb3JlID0gKG5hbWUubG9jYWxlQ29tcGFyZShlbnRyeU5hbWUpIDwgMCk7XG5cbiAgY29uc3QgbmFtZUV4dGVuc2lvbiA9IGV4dGVuc2lvbkZyb21OYW1lKG5hbWUpLFxuICAgICAgICBlbnRyeU5hbWVFeHRlbnNpb24gPSBleHRlbnNpb25Gcm9tTmFtZShlbnRyeU5hbWUpLFxuICAgICAgICBuYW1lV2l0aG91dEV4dGVuc2lvbiA9IG5hbWVXaXRob3V0RXh0ZW5zaW9uRnJvbU5hbWUobmFtZSksXG4gICAgICAgIGVudHJ5TmFtZVdpdGhvdXRFeHRlbnNpb24gPSBuYW1lV2l0aG91dEV4dGVuc2lvbkZyb21OYW1lKGVudHJ5TmFtZSksXG4gICAgICAgIG5hbWVFeHRlbnNpb25QcmVzZW50ID0gKG5hbWVFeHRlbnNpb24gIT09IG51bGwpLFxuICAgICAgICBlbnRyeU5hbWVFeHRlbnNpb25QcmVzZW50ID0gKGVudHJ5TmFtZUV4dGVuc2lvbiAhPT0gbnVsbCksXG4gICAgICAgIG5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZyA9IChuYW1lV2l0aG91dEV4dGVuc2lvbiA9PT0gbnVsbCksXG4gICAgICAgIGVudHJ5TmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nID0gKGVudHJ5TmFtZVdpdGhvdXRFeHRlbnNpb24gPT09IG51bGwpLFxuICAgICAgICBleHRlbnNpb25zQm90aFByZXNlbnQgPSAobmFtZUV4dGVuc2lvblByZXNlbnQgJiYgZW50cnlOYW1lRXh0ZW5zaW9uUHJlc2VudCksXG4gICAgICAgIG5hbWVzV2l0aG91dEV4dGVuc2lvbnNCb3RoTWlzc2luZyA9IChuYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmcgJiYgZW50cnlOYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmcpO1xuXG4gIGlmIChuYW1lc1dpdGhvdXRFeHRlbnNpb25zQm90aE1pc3NpbmcpIHtcbiAgICAvLy9cbiAgfSBlbHNlIGlmIChuYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmcpIHtcbiAgICBiZWZvcmUgPSB0cnVlO1xuICB9IGVsc2UgaWYgKGVudHJ5TmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nKSB7XG4gICAgYmVmb3JlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGV4dGVuc2lvbnNCb3RoUHJlc2VudCkge1xuICAgICAgY29uc3QgZXh0ZW5zaW9uc0RpZmZlciA9IChuYW1lRXh0ZW5zaW9uICE9PSBlbnRyeU5hbWVFeHRlbnNpb24pO1xuXG4gICAgICBpZiAoZXh0ZW5zaW9uc0RpZmZlcikge1xuICAgICAgICBiZWZvcmUgPSAobmFtZUV4dGVuc2lvbi5sb2NhbGVDb21wYXJlKGVudHJ5TmFtZUV4dGVuc2lvbikgPCAwKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5hbWVFeHRlbnNpb25QcmVzZW50KSB7XG4gICAgICBiZWZvcmUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGVudHJ5TmFtZUV4dGVuc2lvblByZXNlbnQpIHtcbiAgICAgIGJlZm9yZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJlZm9yZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGV4dGVuc2lvbkZyb21OYW1lLFxuICBuYW1lV2l0aG91dEV4dGVuc2lvbkZyb21OYW1lLFxuICBuYW1lSXNCZWZvcmVFbnRyeU5hbWVcbn07XG4iXX0=