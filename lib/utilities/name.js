"use strict";

var _necessary = require("necessary");

var second = _necessary.arrayUtilities.second;

function extensionFromName(name) {
  var extension = null;
  var matches = name.match(/^.*\.([^.]+)$/);

  if (matches !== null) {
    var secondMatch = second(matches);
    extension = secondMatch; ///
  }

  return extension;
}

function nameWithoutExtensionFromName(name) {
  var nameWithoutExtension = null;
  var matches = name.match(/^(.+)\.[^.]+$/);

  if (matches !== null) {
    var secondMatch = second(matches);
    nameWithoutExtension = secondMatch; ///
  }

  return nameWithoutExtension;
}

function nameIsBeforeEntryName(name, entryName) {
  var before = name.localeCompare(entryName) < 0;
  var nameExtension = extensionFromName(name),
      entryNameExtension = extensionFromName(entryName),
      nameWithoutExtension = nameWithoutExtensionFromName(name),
      entryNameWithoutExtension = nameWithoutExtensionFromName(entryName),
      nameExtensionPresent = nameExtension !== null,
      entryNameExtensionPresent = entryNameExtension !== null,
      nameWithoutExtensionMissing = nameWithoutExtension === null,
      entryNameWithoutExtensionMissing = entryNameWithoutExtension === null,
      extensionsBothPresent = nameExtensionPresent && entryNameExtensionPresent,
      namesWithoutExtensionsBothMissing = nameWithoutExtensionMissing && entryNameWithoutExtensionMissing;

  if (namesWithoutExtensionsBothMissing) {///
  } else if (nameWithoutExtensionMissing) {
    before = true;
  } else if (entryNameWithoutExtensionMissing) {
    before = false;
  } else {
    if (extensionsBothPresent) {
      var extensionsDiffer = nameExtension !== entryNameExtension;

      if (extensionsDiffer) {
        before = nameExtension.localeCompare(entryNameExtension) < 0;
      }
    } else if (nameExtensionPresent) {
      before = false;
    } else if (entryNameExtensionPresent) {
      before = true;
    }
  }

  return before;
}

module.exports = {
  extensionFromName: extensionFromName,
  nameWithoutExtensionFromName: nameWithoutExtensionFromName,
  nameIsBeforeEntryName: nameIsBeforeEntryName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hbWUuanMiXSwibmFtZXMiOlsic2Vjb25kIiwiYXJyYXlVdGlsaXRpZXMiLCJleHRlbnNpb25Gcm9tTmFtZSIsIm5hbWUiLCJleHRlbnNpb24iLCJtYXRjaGVzIiwibWF0Y2giLCJzZWNvbmRNYXRjaCIsIm5hbWVXaXRob3V0RXh0ZW5zaW9uRnJvbU5hbWUiLCJuYW1lV2l0aG91dEV4dGVuc2lvbiIsIm5hbWVJc0JlZm9yZUVudHJ5TmFtZSIsImVudHJ5TmFtZSIsImJlZm9yZSIsImxvY2FsZUNvbXBhcmUiLCJuYW1lRXh0ZW5zaW9uIiwiZW50cnlOYW1lRXh0ZW5zaW9uIiwiZW50cnlOYW1lV2l0aG91dEV4dGVuc2lvbiIsIm5hbWVFeHRlbnNpb25QcmVzZW50IiwiZW50cnlOYW1lRXh0ZW5zaW9uUHJlc2VudCIsIm5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZyIsImVudHJ5TmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nIiwiZXh0ZW5zaW9uc0JvdGhQcmVzZW50IiwibmFtZXNXaXRob3V0RXh0ZW5zaW9uc0JvdGhNaXNzaW5nIiwiZXh0ZW5zaW9uc0RpZmZlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztJQUVRQSxNLEdBQVdDLHlCLENBQVhELE07O0FBRVIsU0FBU0UsaUJBQVQsQ0FBMkJDLElBQTNCLEVBQWlDO0FBQy9CLE1BQUlDLFNBQVMsR0FBRyxJQUFoQjtBQUVBLE1BQU1DLE9BQU8sR0FBR0YsSUFBSSxDQUFDRyxLQUFMLENBQVcsZUFBWCxDQUFoQjs7QUFFQSxNQUFJRCxPQUFPLEtBQUssSUFBaEIsRUFBc0I7QUFDcEIsUUFBTUUsV0FBVyxHQUFHUCxNQUFNLENBQUNLLE9BQUQsQ0FBMUI7QUFFQUQsSUFBQUEsU0FBUyxHQUFHRyxXQUFaLENBSG9CLENBR007QUFDM0I7O0FBRUQsU0FBT0gsU0FBUDtBQUNEOztBQUVELFNBQVNJLDRCQUFULENBQXNDTCxJQUF0QyxFQUE0QztBQUMxQyxNQUFJTSxvQkFBb0IsR0FBRyxJQUEzQjtBQUVBLE1BQU1KLE9BQU8sR0FBR0YsSUFBSSxDQUFDRyxLQUFMLENBQVcsZUFBWCxDQUFoQjs7QUFFQSxNQUFJRCxPQUFPLEtBQUssSUFBaEIsRUFBc0I7QUFDcEIsUUFBTUUsV0FBVyxHQUFHUCxNQUFNLENBQUNLLE9BQUQsQ0FBMUI7QUFFQUksSUFBQUEsb0JBQW9CLEdBQUdGLFdBQXZCLENBSG9CLENBR2lCO0FBQ3RDOztBQUVELFNBQU9FLG9CQUFQO0FBQ0Q7O0FBRUQsU0FBU0MscUJBQVQsQ0FBK0JQLElBQS9CLEVBQXFDUSxTQUFyQyxFQUFnRDtBQUM5QyxNQUFJQyxNQUFNLEdBQUlULElBQUksQ0FBQ1UsYUFBTCxDQUFtQkYsU0FBbkIsSUFBZ0MsQ0FBOUM7QUFFQSxNQUFNRyxhQUFhLEdBQUdaLGlCQUFpQixDQUFDQyxJQUFELENBQXZDO0FBQUEsTUFDTVksa0JBQWtCLEdBQUdiLGlCQUFpQixDQUFDUyxTQUFELENBRDVDO0FBQUEsTUFFTUYsb0JBQW9CLEdBQUdELDRCQUE0QixDQUFDTCxJQUFELENBRnpEO0FBQUEsTUFHTWEseUJBQXlCLEdBQUdSLDRCQUE0QixDQUFDRyxTQUFELENBSDlEO0FBQUEsTUFJTU0sb0JBQW9CLEdBQUlILGFBQWEsS0FBSyxJQUpoRDtBQUFBLE1BS01JLHlCQUF5QixHQUFJSCxrQkFBa0IsS0FBSyxJQUwxRDtBQUFBLE1BTU1JLDJCQUEyQixHQUFJVixvQkFBb0IsS0FBSyxJQU45RDtBQUFBLE1BT01XLGdDQUFnQyxHQUFJSix5QkFBeUIsS0FBSyxJQVB4RTtBQUFBLE1BUU1LLHFCQUFxQixHQUFJSixvQkFBb0IsSUFBSUMseUJBUnZEO0FBQUEsTUFTTUksaUNBQWlDLEdBQUlILDJCQUEyQixJQUFJQyxnQ0FUMUU7O0FBV0EsTUFBSUUsaUNBQUosRUFBdUMsQ0FDckM7QUFDRCxHQUZELE1BRU8sSUFBSUgsMkJBQUosRUFBaUM7QUFDdENQLElBQUFBLE1BQU0sR0FBRyxJQUFUO0FBQ0QsR0FGTSxNQUVBLElBQUlRLGdDQUFKLEVBQXNDO0FBQzNDUixJQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNELEdBRk0sTUFFQTtBQUNMLFFBQUlTLHFCQUFKLEVBQTJCO0FBQ3pCLFVBQU1FLGdCQUFnQixHQUFJVCxhQUFhLEtBQUtDLGtCQUE1Qzs7QUFFQSxVQUFJUSxnQkFBSixFQUFzQjtBQUNwQlgsUUFBQUEsTUFBTSxHQUFJRSxhQUFhLENBQUNELGFBQWQsQ0FBNEJFLGtCQUE1QixJQUFrRCxDQUE1RDtBQUNEO0FBQ0YsS0FORCxNQU1PLElBQUlFLG9CQUFKLEVBQTBCO0FBQy9CTCxNQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNELEtBRk0sTUFFQSxJQUFJTSx5QkFBSixFQUErQjtBQUNwQ04sTUFBQUEsTUFBTSxHQUFHLElBQVQ7QUFDRDtBQUNGOztBQUVELFNBQU9BLE1BQVA7QUFDRDs7QUFFRFksTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2Z2QixFQUFBQSxpQkFBaUIsRUFBakJBLGlCQURlO0FBRWZNLEVBQUFBLDRCQUE0QixFQUE1QkEsNEJBRmU7QUFHZkUsRUFBQUEscUJBQXFCLEVBQXJCQTtBQUhlLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5jb25zdCB7IHNlY29uZCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGV4dGVuc2lvbkZyb21OYW1lKG5hbWUpIHtcbiAgbGV0IGV4dGVuc2lvbiA9IG51bGw7XG5cbiAgY29uc3QgbWF0Y2hlcyA9IG5hbWUubWF0Y2goL14uKlxcLihbXi5dKykkLyk7XG5cbiAgaWYgKG1hdGNoZXMgIT09IG51bGwpIHtcbiAgICBjb25zdCBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKTtcblxuICAgIGV4dGVuc2lvbiA9IHNlY29uZE1hdGNoOyAgLy8vXG4gIH1cblxuICByZXR1cm4gZXh0ZW5zaW9uO1xufVxuXG5mdW5jdGlvbiBuYW1lV2l0aG91dEV4dGVuc2lvbkZyb21OYW1lKG5hbWUpIHtcbiAgbGV0IG5hbWVXaXRob3V0RXh0ZW5zaW9uID0gbnVsbDtcblxuICBjb25zdCBtYXRjaGVzID0gbmFtZS5tYXRjaCgvXiguKylcXC5bXi5dKyQvKTtcblxuICBpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHNlY29uZE1hdGNoID0gc2Vjb25kKG1hdGNoZXMpO1xuXG4gICAgbmFtZVdpdGhvdXRFeHRlbnNpb24gPSBzZWNvbmRNYXRjaDsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIG5hbWVXaXRob3V0RXh0ZW5zaW9uO1xufVxuXG5mdW5jdGlvbiBuYW1lSXNCZWZvcmVFbnRyeU5hbWUobmFtZSwgZW50cnlOYW1lKSB7XG4gIGxldCBiZWZvcmUgPSAobmFtZS5sb2NhbGVDb21wYXJlKGVudHJ5TmFtZSkgPCAwKTtcblxuICBjb25zdCBuYW1lRXh0ZW5zaW9uID0gZXh0ZW5zaW9uRnJvbU5hbWUobmFtZSksXG4gICAgICAgIGVudHJ5TmFtZUV4dGVuc2lvbiA9IGV4dGVuc2lvbkZyb21OYW1lKGVudHJ5TmFtZSksXG4gICAgICAgIG5hbWVXaXRob3V0RXh0ZW5zaW9uID0gbmFtZVdpdGhvdXRFeHRlbnNpb25Gcm9tTmFtZShuYW1lKSxcbiAgICAgICAgZW50cnlOYW1lV2l0aG91dEV4dGVuc2lvbiA9IG5hbWVXaXRob3V0RXh0ZW5zaW9uRnJvbU5hbWUoZW50cnlOYW1lKSxcbiAgICAgICAgbmFtZUV4dGVuc2lvblByZXNlbnQgPSAobmFtZUV4dGVuc2lvbiAhPT0gbnVsbCksXG4gICAgICAgIGVudHJ5TmFtZUV4dGVuc2lvblByZXNlbnQgPSAoZW50cnlOYW1lRXh0ZW5zaW9uICE9PSBudWxsKSxcbiAgICAgICAgbmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nID0gKG5hbWVXaXRob3V0RXh0ZW5zaW9uID09PSBudWxsKSxcbiAgICAgICAgZW50cnlOYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmcgPSAoZW50cnlOYW1lV2l0aG91dEV4dGVuc2lvbiA9PT0gbnVsbCksXG4gICAgICAgIGV4dGVuc2lvbnNCb3RoUHJlc2VudCA9IChuYW1lRXh0ZW5zaW9uUHJlc2VudCAmJiBlbnRyeU5hbWVFeHRlbnNpb25QcmVzZW50KSxcbiAgICAgICAgbmFtZXNXaXRob3V0RXh0ZW5zaW9uc0JvdGhNaXNzaW5nID0gKG5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZyAmJiBlbnRyeU5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZyk7XG5cbiAgaWYgKG5hbWVzV2l0aG91dEV4dGVuc2lvbnNCb3RoTWlzc2luZykge1xuICAgIC8vL1xuICB9IGVsc2UgaWYgKG5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZykge1xuICAgIGJlZm9yZSA9IHRydWU7XG4gIH0gZWxzZSBpZiAoZW50cnlOYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmcpIHtcbiAgICBiZWZvcmUgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZXh0ZW5zaW9uc0JvdGhQcmVzZW50KSB7XG4gICAgICBjb25zdCBleHRlbnNpb25zRGlmZmVyID0gKG5hbWVFeHRlbnNpb24gIT09IGVudHJ5TmFtZUV4dGVuc2lvbik7XG5cbiAgICAgIGlmIChleHRlbnNpb25zRGlmZmVyKSB7XG4gICAgICAgIGJlZm9yZSA9IChuYW1lRXh0ZW5zaW9uLmxvY2FsZUNvbXBhcmUoZW50cnlOYW1lRXh0ZW5zaW9uKSA8IDApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmFtZUV4dGVuc2lvblByZXNlbnQpIHtcbiAgICAgIGJlZm9yZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoZW50cnlOYW1lRXh0ZW5zaW9uUHJlc2VudCkge1xuICAgICAgYmVmb3JlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYmVmb3JlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZXh0ZW5zaW9uRnJvbU5hbWUsXG4gIG5hbWVXaXRob3V0RXh0ZW5zaW9uRnJvbU5hbWUsXG4gIG5hbWVJc0JlZm9yZUVudHJ5TmFtZVxufTtcbiJdfQ==